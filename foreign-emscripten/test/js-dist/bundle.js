var h$ffi_emscripten__test_module =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/js-src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/(webpack)/buildin/global.js?");

/***/ }),

/***/ "./test/js-src/funz.js":
/*!*****************************!*\
  !*** ./test/js-src/funz.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, __dirname, Buffer) {\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\n// Copyright 2010 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof Module !== 'undefined' ? Module : {};\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// {{PRE_JSES}}\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = {};\nvar key;\nfor (key in Module) {\n  if (Module.hasOwnProperty(key)) {\n    moduleOverrides[key] = Module[key];\n  }\n}\n\nModule['arguments'] = [];\nModule['thisProgram'] = './this.program';\nModule['quit'] = function(status, toThrow) {\n  throw toThrow;\n};\nModule['preRun'] = [];\nModule['postRun'] = [];\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\nvar ENVIRONMENT_IS_WEB = false;\nvar ENVIRONMENT_IS_WORKER = false;\nvar ENVIRONMENT_IS_NODE = false;\nvar ENVIRONMENT_IS_SHELL = false;\nENVIRONMENT_IS_WEB = typeof window === 'object';\nENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\nENVIRONMENT_IS_NODE = typeof process === 'object' && \"function\" === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (Module['ENVIRONMENT']) {\n  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');\n}\n\n\n// Three configurations we can be running in:\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\n\n\n\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  } else {\n    return scriptDirectory + path;\n  }\n}\n\nif (ENVIRONMENT_IS_NODE) {\n  scriptDirectory = __dirname + '/';\n\n  // Expose functionality in the same simple way that the shells work\n  // Note that we pollute the global namespace here, otherwise we break in node\n  var nodeFS;\n  var nodePath;\n\n  Module['read'] = function shell_read(filename, binary) {\n    var ret;\n    ret = tryParseAsDataURI(filename);\n    if (!ret) {\n      if (!nodeFS) nodeFS = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n      if (!nodePath) nodePath = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n      filename = nodePath['normalize'](filename);\n      ret = nodeFS['readFileSync'](filename);\n    }\n    return binary ? ret : ret.toString();\n  };\n\n  Module['readBinary'] = function readBinary(filename) {\n    var ret = Module['read'](filename, true);\n    if (!ret.buffer) {\n      ret = new Uint8Array(ret);\n    }\n    assert(ret.buffer);\n    return ret;\n  };\n\n  if (process['argv'].length > 1) {\n    Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/');\n  }\n\n  Module['arguments'] = process['argv'].slice(2);\n\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\n\n  process['on']('uncaughtException', function(ex) {\n    // suppress ExitStatus exceptions from showing an error\n    if (!(ex instanceof ExitStatus)) {\n      throw ex;\n    }\n  });\n  // Currently node will swallow unhandled rejections, but this behavior is\n  // deprecated, and in the future it will exit with error status.\n  process['on']('unhandledRejection', abort);\n\n  Module['quit'] = function(status) {\n    process['exit'](status);\n  };\n\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\n} else\nif (ENVIRONMENT_IS_SHELL) {\n\n\n  if (typeof read != 'undefined') {\n    Module['read'] = function shell_read(f) {\n      var data = tryParseAsDataURI(f);\n      if (data) {\n        return intArrayToString(data);\n      }\n      return read(f);\n    };\n  }\n\n  Module['readBinary'] = function readBinary(f) {\n    var data;\n    data = tryParseAsDataURI(f);\n    if (data) {\n      return data;\n    }\n    if (typeof readbuffer === 'function') {\n      return new Uint8Array(readbuffer(f));\n    }\n    data = read(f, 'binary');\n    assert(typeof data === 'object');\n    return data;\n  };\n\n  if (typeof scriptArgs != 'undefined') {\n    Module['arguments'] = scriptArgs;\n  } else if (typeof arguments != 'undefined') {\n    Module['arguments'] = arguments;\n  }\n\n  if (typeof quit === 'function') {\n    Module['quit'] = function(status) {\n      quit(status);\n    }\n  }\n} else\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n\n  Module['read'] = function shell_read(url) {\n    try {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n    } catch (err) {\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        return intArrayToString(data);\n      }\n      throw err;\n    }\n  };\n\n  if (ENVIRONMENT_IS_WORKER) {\n    Module['readBinary'] = function readBinary(url) {\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(xhr.response);\n      } catch (err) {\n        var data = tryParseAsDataURI(url);\n        if (data) {\n          return data;\n        }\n        throw err;\n      }\n    };\n  }\n\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = function xhr_onload() {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        onload(data.buffer);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  };\n\n  Module['setWindowTitle'] = function(title) { document.title = title };\n} else\n{\n  throw new Error('environment detection error');\n}\n\n// Set up the out() and err() hooks, which are how we can print to stdout or\n// stderr, respectively.\n// If the user provided Module.print or printErr, use that. Otherwise,\n// console.log is checked first, as 'print' on the web will open a print dialogue\n// printErr is preferable to console.warn (works better in shells)\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\n\n// Merge back in the overrides\nfor (key in moduleOverrides) {\n  if (moduleOverrides.hasOwnProperty(key)) {\n    Module[key] = moduleOverrides[key];\n  }\n}\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = undefined;\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\nassert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// {{PREAMBLE_ADDITIONS}}\n\nvar STACK_ALIGN = 16;\n\n// stack management, and other functionality that is provided by the compiled code,\n// should not be used before it is ready\nstackSave = stackRestore = stackAlloc = function() {\n  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');\n};\n\nfunction staticAlloc(size) {\n  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');\n}\n\nfunction dynamicAlloc(size) {\n  assert(DYNAMICTOP_PTR);\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\n  var end = (ret + size + 15) & -16;\n  if (end <= _emscripten_get_heap_size()) {\n    HEAP32[DYNAMICTOP_PTR>>2] = end;\n  } else {\n    return 0;\n  }\n  return ret;\n}\n\nfunction alignMemory(size, factor) {\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\n  return Math.ceil(size / factor) * factor;\n}\n\nfunction getNativeTypeSize(type) {\n  switch (type) {\n    case 'i1': case 'i8': return 1;\n    case 'i16': return 2;\n    case 'i32': return 4;\n    case 'i64': return 8;\n    case 'float': return 4;\n    case 'double': return 8;\n    default: {\n      if (type[type.length-1] === '*') {\n        return 4; // A pointer\n      } else if (type[0] === 'i') {\n        var bits = parseInt(type.substr(1));\n        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);\n        return bits / 8;\n      } else {\n        return 0;\n      }\n    }\n  }\n}\n\nfunction warnOnce(text) {\n  if (!warnOnce.shown) warnOnce.shown = {};\n  if (!warnOnce.shown[text]) {\n    warnOnce.shown[text] = 1;\n    err(text);\n  }\n}\n\nvar asm2wasmImports = { // special asm2wasm imports\n    \"f64-rem\": function(x, y) {\n        return x % y;\n    },\n    \"debugger\": function() {\n        debugger;\n    }\n};\n\n\n\nvar jsCallStartIndex = 1;\nvar functionPointers = new Array(0);\n\n\n// 'sig' parameter is currently only used for LLVM backend under certain\n// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.\nfunction addFunction(func, sig) {\n\n  var base = 0;\n  for (var i = base; i < base + 0; i++) {\n    if (!functionPointers[i]) {\n      functionPointers[i] = func;\n      return jsCallStartIndex + i;\n    }\n  }\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\n\n}\n\nfunction removeFunction(index) {\n  functionPointers[index-jsCallStartIndex] = null;\n}\n\nvar funcWrappers = {};\n\nfunction getFuncWrapper(func, sig) {\n  if (!func) return; // on null pointer, return undefined\n  assert(sig);\n  if (!funcWrappers[sig]) {\n    funcWrappers[sig] = {};\n  }\n  var sigCache = funcWrappers[sig];\n  if (!sigCache[func]) {\n    // optimize away arguments usage in common cases\n    if (sig.length === 1) {\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func);\n      };\n    } else if (sig.length === 2) {\n      sigCache[func] = function dynCall_wrapper(arg) {\n        return dynCall(sig, func, [arg]);\n      };\n    } else {\n      // general case\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n  return sigCache[func];\n}\n\n\nfunction makeBigInt(low, high, unsigned) {\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\n}\n\nfunction dynCall(sig, ptr, args) {\n  if (args && args.length) {\n    assert(args.length == sig.length-1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\n  } else {\n    assert(sig.length == 1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].call(null, ptr);\n  }\n}\n\nvar tempRet0 = 0;\n\nvar setTempRet0 = function(value) {\n  tempRet0 = value;\n}\n\nvar getTempRet0 = function() {\n  return tempRet0;\n}\n\nfunction getCompilerSetting(name) {\n  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';\n}\n\nvar Runtime = {\n  // helpful errors\n  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n};\n\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\n// Above 0 is static memory, starting with globals.\n// Then the stack.\n// Then 'dynamic' memory for sbrk.\nvar GLOBAL_BASE = 8;\n\n\n\n\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\n\n\n\n/** @type {function(number, string, boolean=)} */\nfunction getValue(ptr, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': return HEAP8[((ptr)>>0)];\n      case 'i8': return HEAP8[((ptr)>>0)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP32[((ptr)>>2)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      default: abort('invalid type for getValue: ' + type);\n    }\n  return null;\n}\n\n\n\n\n// Wasm globals\n\nvar wasmMemory;\n\n// Potentially used for direct table calls.\nvar wasmTable;\n\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS = 0;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    abort('Assertion failed: ' + text);\n  }\n}\n\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\nfunction getCFunc(ident) {\n  var func = Module['_' + ident]; // closure exported function\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\n  return func;\n}\n\n// C calling interface.\nfunction ccall(ident, returnType, argTypes, args, opts) {\n  // For fast lookup of conversion functions\n  var toC = {\n    'string': function(str) {\n      var ret = 0;\n      if (str !== null && str !== undefined && str !== 0) { // null string\n        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\n        var len = (str.length << 2) + 1;\n        ret = stackAlloc(len);\n        stringToUTF8(str, ret, len);\n      }\n      return ret;\n    },\n    'array': function(arr) {\n      var ret = stackAlloc(arr.length);\n      writeArrayToMemory(arr, ret);\n      return ret;\n    }\n  };\n\n  function convertReturnValue(ret) {\n    if (returnType === 'string') return UTF8ToString(ret);\n    if (returnType === 'boolean') return Boolean(ret);\n    return ret;\n  }\n\n  var func = getCFunc(ident);\n  var cArgs = [];\n  var stack = 0;\n  assert(returnType !== 'array', 'Return type should not be \"array\".');\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      var converter = toC[argTypes[i]];\n      if (converter) {\n        if (stack === 0) stack = stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = func.apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) stackRestore(stack);\n  return ret;\n}\n\nfunction cwrap(ident, returnType, argTypes, opts) {\n  return function() {\n    return ccall(ident, returnType, argTypes, arguments, opts);\n  }\n}\n\n/** @type {function(number, number, string, boolean=)} */\nfunction setValue(ptr, value, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n}\n\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\nvar ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk\nvar ALLOC_NONE = 3; // Do not allocate\n\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\n//             is a little tricky (see docs right below). The reason is that it is optimized\n//             for multiple syntaxes to save space in generated code. So you should\n//             normally not use allocate(), and instead allocate memory using _malloc(),\n//             initialize it with setValue(), and so forth.\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\n//        affect this!)\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\n//         or a single type which is used for the entire block. This only matters if there\n//         is initial data - if @slab is a number, then this does not matter at all and is\n//         ignored.\n// @allocator: How to allocate memory, see ALLOC_*\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\nfunction allocate(slab, types, allocator, ptr) {\n  var zeroinit, size;\n  if (typeof slab === 'number') {\n    zeroinit = true;\n    size = slab;\n  } else {\n    zeroinit = false;\n    size = slab.length;\n  }\n\n  var singleType = typeof types === 'string' ? types : null;\n\n  var ret;\n  if (allocator == ALLOC_NONE) {\n    ret = ptr;\n  } else {\n    ret = [_malloc,\n    stackAlloc,\n    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));\n  }\n\n  if (zeroinit) {\n    var stop;\n    ptr = ret;\n    assert((ret & 3) == 0);\n    stop = ret + (size & ~3);\n    for (; ptr < stop; ptr += 4) {\n      HEAP32[((ptr)>>2)]=0;\n    }\n    stop = ret + size;\n    while (ptr < stop) {\n      HEAP8[((ptr++)>>0)]=0;\n    }\n    return ret;\n  }\n\n  if (singleType === 'i8') {\n    if (slab.subarray || slab.slice) {\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\n    } else {\n      HEAPU8.set(new Uint8Array(slab), ret);\n    }\n    return ret;\n  }\n\n  var i = 0, type, typeSize, previousType;\n  while (i < size) {\n    var curr = slab[i];\n\n    type = singleType || types[i];\n    if (type === 0) {\n      i++;\n      continue;\n    }\n    assert(type, 'Must know what type to store in allocate!');\n\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\n\n    setValue(ret+i, curr, type);\n\n    // no need to look up size unless type changes, so cache it\n    if (previousType !== type) {\n      typeSize = getNativeTypeSize(type);\n      previousType = type;\n    }\n    i += typeSize;\n  }\n\n  return ret;\n}\n\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\nfunction getMemory(size) {\n  if (!runtimeInitialized) return dynamicAlloc(size);\n  return _malloc(size);\n}\n\n\n\n\n/** @type {function(number, number=)} */\nfunction Pointer_stringify(ptr, length) {\n  abort(\"this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!\");\n}\n\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nfunction AsciiToString(ptr) {\n  var str = '';\n  while (1) {\n    var ch = HEAP8[((ptr++)>>0)];\n    if (!ch) return str;\n    str += String.fromCharCode(ch);\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\n\nfunction stringToAscii(str, outPtr) {\n  return writeAsciiToMemory(str, outPtr, false);\n}\n\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\n\n/**\n * @param {number} idx\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ArrayToString(u8Array, idx, maxBytesToRead) {\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)\n  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n  } else {\n    var str = '';\n    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that\n    while (idx < endPtr) {\n      // For UTF8 byte structure, see:\n      // http://en.wikipedia.org/wiki/UTF-8#Description\n      // https://www.ietf.org/rfc/rfc2279.txt\n      // https://tools.ietf.org/html/rfc3629\n      var u0 = u8Array[idx++];\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n      var u1 = u8Array[idx++] & 63;\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n      var u2 = u8Array[idx++] & 63;\n      if ((u0 & 0xF0) == 0xE0) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');\n        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);\n      }\n\n      if (u0 < 0x10000) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 0x10000;\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n      }\n    }\n  }\n  return str;\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a\n// copy of that string as a Javascript String object.\n// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit\n//                 this parameter to scan the string until the first \\0 byte. If maxBytesToRead is\n//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the\n//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will\n//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)\n//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may\n//                 throw JS JIT optimizations off, so it is worth to consider consistently using one\n//                 style or the other.\n/**\n * @param {number} ptr\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ToString(ptr, maxBytesToRead) {\n  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n}\n\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\n//   outIdx: The starting offset in the array to begin the copying.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\n//                    This count should include the null terminator,\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) {\n      var u1 = str.charCodeAt(++i);\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    if (u <= 0x7F) ++len;\n    else if (u <= 0x7FF) len += 2;\n    else if (u <= 0xFFFF) len += 3;\n    else len += 4;\n  }\n  return len;\n}\n\n\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\nfunction UTF16ToString(ptr) {\n  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');\n  var endPtr = ptr;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  var idx = endPtr >> 1;\n  while (HEAP16[idx]) ++idx;\n  endPtr = idx << 1;\n\n  if (endPtr - ptr > 32 && UTF16Decoder) {\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n  } else {\n    var i = 0;\n\n    var str = '';\n    while (1) {\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n      if (codeUnit == 0) return str;\n      ++i;\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\n      str += String.fromCharCode(codeUnit);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 2) return 0;\n  maxBytesToWrite -= 2; // Null terminator.\n  var startPtr = outPtr;\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\n  for (var i = 0; i < numCharsToWrite; ++i) {\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    HEAP16[((outPtr)>>1)]=codeUnit;\n    outPtr += 2;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP16[((outPtr)>>1)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF16(str) {\n  return str.length*2;\n}\n\nfunction UTF32ToString(ptr) {\n  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');\n  var i = 0;\n\n  var str = '';\n  while (1) {\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n    if (utf32 == 0)\n      return str;\n    ++i;\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    if (utf32 >= 0x10000) {\n      var ch = utf32 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    } else {\n      str += String.fromCharCode(utf32);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 4) return 0;\n  var startPtr = outPtr;\n  var endPtr = startPtr + maxBytesToWrite - 4;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n      var trailSurrogate = str.charCodeAt(++i);\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n    }\n    HEAP32[((outPtr)>>2)]=codeUnit;\n    outPtr += 4;\n    if (outPtr + 4 > endPtr) break;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP32[((outPtr)>>2)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF32(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i);\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n    len += 4;\n  }\n\n  return len;\n}\n\n// Allocate heap space for a JS string, and write it there.\n// It is the responsibility of the caller to free() that memory.\nfunction allocateUTF8(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = _malloc(size);\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\n// Allocate stack space for a JS string, and write it there.\nfunction allocateUTF8OnStack(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = stackAlloc(size);\n  stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\n// Deprecated: This function should not be called because it is unsafe and does not provide\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\n// to be secure from out of bounds writes.\n/** @deprecated */\nfunction writeStringToMemory(string, buffer, dontAddNull) {\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\n\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\n  if (dontAddNull) {\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\n    // character that existed at the location where the null will be placed, and restore\n    // that after the write (below).\n    end = buffer + lengthBytesUTF8(string);\n    lastChar = HEAP8[end];\n  }\n  stringToUTF8(string, buffer, Infinity);\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\n}\n\nfunction writeArrayToMemory(array, buffer) {\n  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')\n  HEAP8.set(array, buffer);\n}\n\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\n  for (var i = 0; i < str.length; ++i) {\n    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\n  }\n  // Null-terminate the pointer to the HEAP.\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\n}\n\n\n\n\n\nfunction demangle(func) {\n  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');\n  return func;\n}\n\nfunction demangleAll(text) {\n  var regex =\n    /__Z[\\w\\d_]+/g;\n  return text.replace(regex,\n    function(x) {\n      var y = demangle(x);\n      return x === y ? x : (y + ' [' + x + ']');\n    });\n}\n\nfunction jsStackTrace() {\n  var err = new Error();\n  if (!err.stack) {\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\n    // so try that as a special-case.\n    try {\n      throw new Error(0);\n    } catch(e) {\n      err = e;\n    }\n    if (!err.stack) {\n      return '(no stack trace available)';\n    }\n  }\n  return err.stack.toString();\n}\n\nfunction stackTrace() {\n  var js = jsStackTrace();\n  if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n  return demangleAll(js);\n}\n\n\n\n// Memory management\n\nvar PAGE_SIZE = 16384;\nvar WASM_PAGE_SIZE = 65536;\nvar ASMJS_PAGE_SIZE = 16777216;\n\nfunction alignUp(x, multiple) {\n  if (x % multiple > 0) {\n    x += multiple - (x % multiple);\n  }\n  return x;\n}\n\nvar HEAP,\n/** @type {ArrayBuffer} */\n  buffer,\n/** @type {Int8Array} */\n  HEAP8,\n/** @type {Uint8Array} */\n  HEAPU8,\n/** @type {Int16Array} */\n  HEAP16,\n/** @type {Uint16Array} */\n  HEAPU16,\n/** @type {Int32Array} */\n  HEAP32,\n/** @type {Uint32Array} */\n  HEAPU32,\n/** @type {Float32Array} */\n  HEAPF32,\n/** @type {Float64Array} */\n  HEAPF64;\n\nfunction updateGlobalBuffer(buf) {\n  Module['buffer'] = buffer = buf;\n}\n\nfunction updateGlobalBufferViews() {\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\n}\n\n\nvar STATIC_BASE = 8,\n    STACK_BASE = 1984,\n    STACKTOP = STACK_BASE,\n    STACK_MAX = 5244864,\n    DYNAMIC_BASE = 5244864,\n    DYNAMICTOP_PTR = 1728;\n\nassert(STACK_BASE % 16 === 0, 'stack must start aligned');\nassert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');\n\n\n\nvar TOTAL_STACK = 5242880;\nif (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')\n\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\n\n// Initialize the runtime's memory\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\nassert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,\n       'JS engine does not provide full typed array support');\n\n\n\n\n\n\n\n// Use a provided buffer, if there is one, or else allocate a new one\nif (Module['buffer']) {\n  buffer = Module['buffer'];\n  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);\n} else {\n  // Use a WebAssembly memory where available\n  {\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\n  }\n  assert(buffer.byteLength === TOTAL_MEMORY);\n  Module['buffer'] = buffer;\n}\nupdateGlobalBufferViews();\n\n\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\n\n\n// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.\nfunction writeStackCookie() {\n  assert((STACK_MAX & 3) == 0);\n  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;\n  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;\n}\n\nfunction checkStackCookie() {\n  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {\n    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));\n  }\n  // Also test the global address 0 for integrity.\n  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';\n}\n\nfunction abortStackOverflow(allocSize) {\n  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');\n}\n\n\n  HEAP32[0] = 0x63736d65; /* 'emsc' */\n\n\n\n// Endianness check (note: assumes compiler arch was little-endian)\nHEAP16[1] = 0x6373;\nif (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';\n\nfunction callRuntimeCallbacks(callbacks) {\n  while(callbacks.length > 0) {\n    var callback = callbacks.shift();\n    if (typeof callback == 'function') {\n      callback();\n      continue;\n    }\n    var func = callback.func;\n    if (typeof func === 'number') {\n      if (callback.arg === undefined) {\n        Module['dynCall_v'](func);\n      } else {\n        Module['dynCall_vi'](func, callback.arg);\n      }\n    } else {\n      func(callback.arg === undefined ? null : callback.arg);\n    }\n  }\n}\n\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATMAIN__    = []; // functions called when main() is to be run\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\nvar runtimeExited = false;\n\n\nfunction preRun() {\n  // compatibility - merge in anything from Module['preRun'] at this time\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction ensureInitRuntime() {\n  checkStackCookie();\n  if (runtimeInitialized) return;\n  runtimeInitialized = true;\n  \n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n  checkStackCookie();\n  \n  callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction exitRuntime() {\n  checkStackCookie();\n  runtimeExited = true;\n}\n\nfunction postRun() {\n  checkStackCookie();\n  // compatibility - merge in anything from Module['postRun'] at this time\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n  __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\nfunction unSign(value, bits, ignore) {\n  if (value >= 0) {\n    return value;\n  }\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\n                    : Math.pow(2, bits)         + value;\n}\nfunction reSign(value, bits, ignore) {\n  if (value <= 0) {\n    return value;\n  }\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\n                        : Math.pow(2, bits-1);\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\n  }\n  return value;\n}\n\n\nassert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\n\nvar Math_abs = Math.abs;\nvar Math_cos = Math.cos;\nvar Math_sin = Math.sin;\nvar Math_tan = Math.tan;\nvar Math_acos = Math.acos;\nvar Math_asin = Math.asin;\nvar Math_atan = Math.atan;\nvar Math_atan2 = Math.atan2;\nvar Math_exp = Math.exp;\nvar Math_log = Math.log;\nvar Math_sqrt = Math.sqrt;\nvar Math_ceil = Math.ceil;\nvar Math_floor = Math.floor;\nvar Math_pow = Math.pow;\nvar Math_imul = Math.imul;\nvar Math_fround = Math.fround;\nvar Math_round = Math.round;\nvar Math_min = Math.min;\nvar Math_max = Math.max;\nvar Math_clz32 = Math.clz32;\nvar Math_trunc = Math.trunc;\n\n\n\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n  var orig = id;\n  while (1) {\n    if (!runDependencyTracking[id]) return id;\n    id = orig + Math.random();\n  }\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(!runDependencyTracking[id]);\n    runDependencyTracking[id] = 1;\n    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {\n      // Check for missing dependencies every few seconds\n      runDependencyWatcher = setInterval(function() {\n        if (ABORT) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n          return;\n        }\n        var shown = false;\n        for (var dep in runDependencyTracking) {\n          if (!shown) {\n            shown = true;\n            err('still waiting on run dependencies:');\n          }\n          err('dependency: ' + dep);\n        }\n        if (shown) {\n          err('(end of list)');\n        }\n      }, 10000);\n    }\n  } else {\n    err('warning: run dependency added without ID');\n  }\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(runDependencyTracking[id]);\n    delete runDependencyTracking[id];\n  } else {\n    err('warning: run dependency removed without ID');\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\nModule[\"preloadedImages\"] = {}; // maps url to image data\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\n\n\nvar memoryInitializer = null;\n\n\n\nvar /* show errors on likely calls to FS when it was not included */ FS = {\n  error: function() {\n    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');\n  },\n  init: function() { FS.error() },\n  createDataFile: function() { FS.error() },\n  createPreloadedFile: function() { FS.error() },\n  createLazyFile: function() { FS.error() },\n  open: function() { FS.error() },\n  mkdev: function() { FS.error() },\n  registerDevice: function() { FS.error() },\n  analyzePath: function() { FS.error() },\n  loadFilesFromDB: function() { FS.error() },\n\n  ErrnoError: function ErrnoError() { FS.error() },\n};\nModule['FS_createDataFile'] = FS.createDataFile;\nModule['FS_createPreloadedFile'] = FS.createPreloadedFile;\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  return String.prototype.startsWith ?\n      filename.startsWith(dataURIPrefix) :\n      filename.indexOf(dataURIPrefix) === 0;\n}\n\n\n\n\n\n// === Body ===\n\nvar ASM_CONSTS = [];\n\n\n\n\n\n// STATICTOP = STATIC_BASE + 1976;\n/* global initializers */ /*__ATINIT__.push();*/\n\n\nmemoryInitializer = \"data:application/octet-stream;base64,AAAAAAAAAAAFAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAKgAAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGRpbmc=\";\n\n\n\n\n\n/* no memory initializer */\nvar tempDoublePtr = 1968\nassert(tempDoublePtr % 8 == 0);\n\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n}\n\nfunction copyTempDouble(ptr) {\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\n}\n\n// {{PRE_LIBRARY}}\n\n\n  function ___lock() {}\n\n  \n  var SYSCALLS={buffers:[null,[],[]],printChar:function(stream, curr) {\n        var buffer = SYSCALLS.buffers[stream];\n        assert(buffer);\n        if (curr === 0 || curr === 10) {\n          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n          buffer.length = 0;\n        } else {\n          buffer.push(curr);\n        }\n      },varargs:0,get:function(varargs) {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\n        return ret;\n      },getStr:function() {\n        var ret = UTF8ToString(SYSCALLS.get());\n        return ret;\n      },get64:function() {\n        var low = SYSCALLS.get(), high = SYSCALLS.get();\n        if (low >= 0) assert(high === 0);\n        else assert(high === -1);\n        return low;\n      },getZero:function() {\n        assert(SYSCALLS.get() === 0);\n      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // llseek\n      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();\n      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit\n      var offset = offset_low;\n      FS.llseek(stream, offset, whence);\n      HEAP32[((result)>>2)]=stream.position;\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  \n  function flush_NO_FILESYSTEM() {\n      // flush anything remaining in the buffers during shutdown\n      var fflush = Module[\"_fflush\"];\n      if (fflush) fflush(0);\n      var buffers = SYSCALLS.buffers;\n      if (buffers[1].length) SYSCALLS.printChar(1, 10);\n      if (buffers[2].length) SYSCALLS.printChar(2, 10);\n    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // writev\n      // hack to support printf in FILESYSTEM=0\n      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAP32[(((iov)+(i*8))>>2)];\n        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];\n        for (var j = 0; j < len; j++) {\n          SYSCALLS.printChar(stream, HEAPU8[ptr+j]);\n        }\n        ret += len;\n      }\n      return ret;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // ioctl\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // close\n      var stream = SYSCALLS.getStreamFromFD();\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___unlock() {}\n\n  function _emscripten_get_heap_size() {\n      return TOTAL_MEMORY;\n    }\n\n  \n  function abortOnCannotGrowMemory(requestedSize) {\n      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\n    }function _emscripten_resize_heap(requestedSize) {\n      abortOnCannotGrowMemory(requestedSize);\n    }\n\n   \n\n  \n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\n    }\n  \n  var _Int8Array=undefined;\n  \n  var _Int32Array=undefined; \n\n   \n\n  \n  function ___setErrNo(value) {\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\n      else err('failed to set errno from JS');\n      return value;\n    } \nvar ASSERTIONS = true;\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n/** @type {function(string, boolean=, number=)} */\nfunction intArrayFromString(stringy, dontAddNull, length) {\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n  var u8array = new Array(len);\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n  if (dontAddNull) u8array.length = numBytesWritten;\n  return u8array;\n}\n\nfunction intArrayToString(array) {\n  var ret = [];\n  for (var i = 0; i < array.length; i++) {\n    var chr = array[i];\n    if (chr > 0xFF) {\n      if (ASSERTIONS) {\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n      }\n      chr &= 0xFF;\n    }\n    ret.push(String.fromCharCode(chr));\n  }\n  return ret.join('');\n}\n\n\n// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n/**\n * Decodes a base64 string.\n * @param {String} input The string to decode.\n */\nvar decodeBase64 = typeof atob === 'function' ? atob : function (input) {\n  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  var output = '';\n  var chr1, chr2, chr3;\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n  do {\n    enc1 = keyStr.indexOf(input.charAt(i++));\n    enc2 = keyStr.indexOf(input.charAt(i++));\n    enc3 = keyStr.indexOf(input.charAt(i++));\n    enc4 = keyStr.indexOf(input.charAt(i++));\n\n    chr1 = (enc1 << 2) | (enc2 >> 4);\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output = output + String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n    if (enc4 !== 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  } while (i < input.length);\n  return output;\n};\n\n// Converts a string of base64 into a byte array.\n// Throws error on invalid input.\nfunction intArrayFromBase64(s) {\n  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {\n    var buf;\n    try {\n      buf = Buffer.from(s, 'base64');\n    } catch (_) {\n      buf = new Buffer(s, 'base64');\n    }\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  try {\n    var decoded = decodeBase64(s);\n    var bytes = new Uint8Array(decoded.length);\n    for (var i = 0 ; i < decoded.length ; ++i) {\n      bytes[i] = decoded.charCodeAt(i);\n    }\n    return bytes;\n  } catch (_) {\n    throw new Error('Converting base64 string to bytes failed.');\n  }\n}\n\n// If filename is a base64 data URI, parses and returns data (Buffer on node,\n// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.\nfunction tryParseAsDataURI(filename) {\n  if (!isDataURI(filename)) {\n    return;\n  }\n\n  return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n\n\n// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array\n\n\nfunction nullFunc_ii(x) { err(\"Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_iiii(x) { err(\"Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nvar asmGlobalArg = { \"Int8Array\": Int8Array, \"Int32Array\": Int32Array, \"Uint8Array\": Uint8Array }\n\nvar asmLibraryArg = { \"abort\": abort, \"setTempRet0\": setTempRet0, \"getTempRet0\": getTempRet0, \"abortStackOverflow\": abortStackOverflow, \"nullFunc_ii\": nullFunc_ii, \"nullFunc_iiii\": nullFunc_iiii, \"___lock\": ___lock, \"___setErrNo\": ___setErrNo, \"___syscall140\": ___syscall140, \"___syscall146\": ___syscall146, \"___syscall54\": ___syscall54, \"___syscall6\": ___syscall6, \"___unlock\": ___unlock, \"_emscripten_get_heap_size\": _emscripten_get_heap_size, \"_emscripten_memcpy_big\": _emscripten_memcpy_big, \"_emscripten_resize_heap\": _emscripten_resize_heap, \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory, \"flush_NO_FILESYSTEM\": flush_NO_FILESYSTEM, \"tempDoublePtr\": tempDoublePtr, \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR }\n// EMSCRIPTEN_START_ASM\nvar asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {\n'almost asm';\n\n  var HEAP8 = new global.Int8Array(buffer),\n  HEAP32 = new global.Int32Array(buffer),\n  HEAPU8 = new global.Uint8Array(buffer),\n  tempDoublePtr=env.tempDoublePtr|0,\n  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,\n  __THREW__ = 0,\n  threwValue = 0,\n  setjmpId = 0,\n  tempInt = 0,\n  tempBigInt = 0,\n  tempBigIntS = 0,\n  tempValue = 0,\n  tempDouble = 0.0,\n  abort=env.abort,\n  setTempRet0=env.setTempRet0,\n  getTempRet0=env.getTempRet0,\n  abortStackOverflow=env.abortStackOverflow,\n  nullFunc_ii=env.nullFunc_ii,\n  nullFunc_iiii=env.nullFunc_iiii,\n  ___lock=env.___lock,\n  ___setErrNo=env.___setErrNo,\n  ___syscall140=env.___syscall140,\n  ___syscall146=env.___syscall146,\n  ___syscall54=env.___syscall54,\n  ___syscall6=env.___syscall6,\n  ___unlock=env.___unlock,\n  _emscripten_get_heap_size=env._emscripten_get_heap_size,\n  _emscripten_memcpy_big=env._emscripten_memcpy_big,\n  _emscripten_resize_heap=env._emscripten_resize_heap,\n  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,\n  flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM,\n  STACKTOP = 1984,\n  STACK_MAX = 5244864,\n  tempFloat = 0.0;\n\n// EMSCRIPTEN_START_FUNCS\n\nfunction stackAlloc(size) {\n  size = size|0;\n  var ret = 0;\n  ret = STACKTOP;\n  STACKTOP = (STACKTOP + size)|0;\n  STACKTOP = (STACKTOP + 15)&-16;\n    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);\n\n  return ret|0;\n}\nfunction stackSave() {\n  return STACKTOP|0;\n}\nfunction stackRestore(top) {\n  top = top|0;\n  STACKTOP = top;\n}\nfunction establishStackSpace(stackBase, stackMax) {\n  stackBase = stackBase|0;\n  stackMax = stackMax|0;\n  STACKTOP = stackBase;\n  STACK_MAX = stackMax;\n}\n\nfunction _fun1() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n return 0;\n}\nfunction _fun2($0) {\n $0 = $0|0;\n var $1 = 0, $2 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $1 = $0;\n $2 = $1;\n STACKTOP = sp;return ($2|0);\n}\nfunction _fun3($0,$1) {\n $0 = $0|0;\n $1 = $1|0;\n var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $2 = $0;\n $3 = $1;\n $4 = $2;\n $5 = $3;\n $6 = (($4) + ($5))|0;\n STACKTOP = sp;return ($6|0);\n}\nfunction _fun4() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n setTempRet0((0) | 0);\n return 0;\n}\nfunction _fun5($0,$1) {\n $0 = $0|0;\n $1 = $1|0;\n var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $2 = sp;\n $3 = $2;\n $4 = $3;\n HEAP32[$4>>2] = $0;\n $5 = (($3) + 4)|0;\n $6 = $5;\n HEAP32[$6>>2] = $1;\n $7 = $2;\n $8 = $7;\n $9 = HEAP32[$8>>2]|0;\n $10 = (($7) + 4)|0;\n $11 = $10;\n $12 = HEAP32[$11>>2]|0;\n setTempRet0(($12) | 0);\n STACKTOP = sp;return ($9|0);\n}\nfunction _fun6($0,$1,$2,$3) {\n $0 = $0|0;\n $1 = $1|0;\n $2 = $2|0;\n $3 = $3|0;\n var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;\n var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $4 = sp + 8|0;\n $5 = sp;\n $6 = $4;\n $7 = $6;\n HEAP32[$7>>2] = $0;\n $8 = (($6) + 4)|0;\n $9 = $8;\n HEAP32[$9>>2] = $1;\n $10 = $5;\n $11 = $10;\n HEAP32[$11>>2] = $2;\n $12 = (($10) + 4)|0;\n $13 = $12;\n HEAP32[$13>>2] = $3;\n $14 = $4;\n $15 = $14;\n $16 = HEAP32[$15>>2]|0;\n $17 = (($14) + 4)|0;\n $18 = $17;\n $19 = HEAP32[$18>>2]|0;\n $20 = $5;\n $21 = $20;\n $22 = HEAP32[$21>>2]|0;\n $23 = (($20) + 4)|0;\n $24 = $23;\n $25 = HEAP32[$24>>2]|0;\n $26 = (_i64Add(($16|0),($19|0),($22|0),($25|0))|0);\n $27 = (getTempRet0() | 0);\n setTempRet0(($27) | 0);\n STACKTOP = sp;return ($26|0);\n}\nfunction _fun7() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n return;\n}\nfunction _fun8($0) {\n $0 = $0|0;\n var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $1 = $0;\n $2 = 0;\n while(1) {\n  $3 = $1;\n  $4 = $2;\n  $5 = (($3) + ($4)|0);\n  $6 = HEAP8[$5>>0]|0;\n  $7 = $6 << 24 >> 24;\n  $8 = ($7|0)!=(0);\n  $9 = $2;\n  if (!($8)) {\n   break;\n  }\n  $10 = (($9) + 1)|0;\n  $2 = $10;\n }\n STACKTOP = sp;return ($9|0);\n}\nfunction _fun9($0,$1) {\n $0 = $0|0;\n $1 = $1|0;\n var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;\n var $8 = 0, $9 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $2 = $0;\n $3 = $1;\n $4 = 0;\n while(1) {\n  $5 = $3;\n  $6 = $4;\n  $7 = (($5) + ($6)|0);\n  $8 = HEAP8[$7>>0]|0;\n  $9 = $8 << 24 >> 24;\n  $10 = ($9|0)!=(0);\n  if (!($10)) {\n   break;\n  }\n  $11 = $3;\n  $12 = $4;\n  $13 = (($11) + ($12)|0);\n  $14 = HEAP8[$13>>0]|0;\n  $15 = $2;\n  $16 = $4;\n  $17 = (($15) + ($16)|0);\n  HEAP8[$17>>0] = $14;\n  $18 = $4;\n  $19 = (($18) + 1)|0;\n  $4 = $19;\n }\n $20 = $2;\n $21 = $4;\n $22 = (($20) + ($21)|0);\n HEAP8[$22>>0] = 0;\n $23 = $4;\n STACKTOP = sp;return ($23|0);\n}\nfunction _fun10() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n return (144|0);\n}\nfunction _fun11($0) {\n $0 = $0|0;\n var $1 = 0, $2 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $1 = $0;\n $2 = $1;\n STACKTOP = sp;return ($2|0);\n}\nfunction _malloc($0) {\n $0 = $0|0;\n var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;\n var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;\n var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;\n var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;\n var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;\n var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;\n var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;\n var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;\n var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;\n var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;\n var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;\n var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;\n var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;\n var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;\n var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;\n var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;\n var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;\n var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;\n var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;\n var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;\n var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;\n var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;\n var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;\n var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;\n var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;\n var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;\n var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;\n var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;\n var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;\n var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;\n var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;\n var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;\n var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;\n var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;\n var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;\n var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;\n var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;\n var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;\n var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;\n var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;\n var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;\n var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;\n var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;\n var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;\n var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;\n var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;\n var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;\n var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;\n var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;\n var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;\n var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;\n var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;\n var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;\n var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;\n var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $1 = sp;\n $2 = ($0>>>0)<(245);\n do {\n  if ($2) {\n   $3 = ($0>>>0)<(11);\n   $4 = (($0) + 11)|0;\n   $5 = $4 & -8;\n   $6 = $3 ? 16 : $5;\n   $7 = $6 >>> 3;\n   $8 = HEAP32[300]|0;\n   $9 = $8 >>> $7;\n   $10 = $9 & 3;\n   $11 = ($10|0)==(0);\n   if (!($11)) {\n    $12 = $9 & 1;\n    $13 = $12 ^ 1;\n    $14 = (($13) + ($7))|0;\n    $15 = $14 << 1;\n    $16 = (1240 + ($15<<2)|0);\n    $17 = ((($16)) + 8|0);\n    $18 = HEAP32[$17>>2]|0;\n    $19 = ((($18)) + 8|0);\n    $20 = HEAP32[$19>>2]|0;\n    $21 = ($20|0)==($16|0);\n    if ($21) {\n     $22 = 1 << $14;\n     $23 = $22 ^ -1;\n     $24 = $8 & $23;\n     HEAP32[300] = $24;\n    } else {\n     $25 = ((($20)) + 12|0);\n     HEAP32[$25>>2] = $16;\n     HEAP32[$17>>2] = $20;\n    }\n    $26 = $14 << 3;\n    $27 = $26 | 3;\n    $28 = ((($18)) + 4|0);\n    HEAP32[$28>>2] = $27;\n    $29 = (($18) + ($26)|0);\n    $30 = ((($29)) + 4|0);\n    $31 = HEAP32[$30>>2]|0;\n    $32 = $31 | 1;\n    HEAP32[$30>>2] = $32;\n    $$0 = $19;\n    STACKTOP = sp;return ($$0|0);\n   }\n   $33 = HEAP32[(1208)>>2]|0;\n   $34 = ($6>>>0)>($33>>>0);\n   if ($34) {\n    $35 = ($9|0)==(0);\n    if (!($35)) {\n     $36 = $9 << $7;\n     $37 = 2 << $7;\n     $38 = (0 - ($37))|0;\n     $39 = $37 | $38;\n     $40 = $36 & $39;\n     $41 = (0 - ($40))|0;\n     $42 = $40 & $41;\n     $43 = (($42) + -1)|0;\n     $44 = $43 >>> 12;\n     $45 = $44 & 16;\n     $46 = $43 >>> $45;\n     $47 = $46 >>> 5;\n     $48 = $47 & 8;\n     $49 = $48 | $45;\n     $50 = $46 >>> $48;\n     $51 = $50 >>> 2;\n     $52 = $51 & 4;\n     $53 = $49 | $52;\n     $54 = $50 >>> $52;\n     $55 = $54 >>> 1;\n     $56 = $55 & 2;\n     $57 = $53 | $56;\n     $58 = $54 >>> $56;\n     $59 = $58 >>> 1;\n     $60 = $59 & 1;\n     $61 = $57 | $60;\n     $62 = $58 >>> $60;\n     $63 = (($61) + ($62))|0;\n     $64 = $63 << 1;\n     $65 = (1240 + ($64<<2)|0);\n     $66 = ((($65)) + 8|0);\n     $67 = HEAP32[$66>>2]|0;\n     $68 = ((($67)) + 8|0);\n     $69 = HEAP32[$68>>2]|0;\n     $70 = ($69|0)==($65|0);\n     if ($70) {\n      $71 = 1 << $63;\n      $72 = $71 ^ -1;\n      $73 = $8 & $72;\n      HEAP32[300] = $73;\n      $90 = $73;\n     } else {\n      $74 = ((($69)) + 12|0);\n      HEAP32[$74>>2] = $65;\n      HEAP32[$66>>2] = $69;\n      $90 = $8;\n     }\n     $75 = $63 << 3;\n     $76 = (($75) - ($6))|0;\n     $77 = $6 | 3;\n     $78 = ((($67)) + 4|0);\n     HEAP32[$78>>2] = $77;\n     $79 = (($67) + ($6)|0);\n     $80 = $76 | 1;\n     $81 = ((($79)) + 4|0);\n     HEAP32[$81>>2] = $80;\n     $82 = (($67) + ($75)|0);\n     HEAP32[$82>>2] = $76;\n     $83 = ($33|0)==(0);\n     if (!($83)) {\n      $84 = HEAP32[(1220)>>2]|0;\n      $85 = $33 >>> 3;\n      $86 = $85 << 1;\n      $87 = (1240 + ($86<<2)|0);\n      $88 = 1 << $85;\n      $89 = $90 & $88;\n      $91 = ($89|0)==(0);\n      if ($91) {\n       $92 = $90 | $88;\n       HEAP32[300] = $92;\n       $$pre = ((($87)) + 8|0);\n       $$0194 = $87;$$pre$phiZ2D = $$pre;\n      } else {\n       $93 = ((($87)) + 8|0);\n       $94 = HEAP32[$93>>2]|0;\n       $$0194 = $94;$$pre$phiZ2D = $93;\n      }\n      HEAP32[$$pre$phiZ2D>>2] = $84;\n      $95 = ((($$0194)) + 12|0);\n      HEAP32[$95>>2] = $84;\n      $96 = ((($84)) + 8|0);\n      HEAP32[$96>>2] = $$0194;\n      $97 = ((($84)) + 12|0);\n      HEAP32[$97>>2] = $87;\n     }\n     HEAP32[(1208)>>2] = $76;\n     HEAP32[(1220)>>2] = $79;\n     $$0 = $68;\n     STACKTOP = sp;return ($$0|0);\n    }\n    $98 = HEAP32[(1204)>>2]|0;\n    $99 = ($98|0)==(0);\n    if ($99) {\n     $$0192 = $6;\n    } else {\n     $100 = (0 - ($98))|0;\n     $101 = $98 & $100;\n     $102 = (($101) + -1)|0;\n     $103 = $102 >>> 12;\n     $104 = $103 & 16;\n     $105 = $102 >>> $104;\n     $106 = $105 >>> 5;\n     $107 = $106 & 8;\n     $108 = $107 | $104;\n     $109 = $105 >>> $107;\n     $110 = $109 >>> 2;\n     $111 = $110 & 4;\n     $112 = $108 | $111;\n     $113 = $109 >>> $111;\n     $114 = $113 >>> 1;\n     $115 = $114 & 2;\n     $116 = $112 | $115;\n     $117 = $113 >>> $115;\n     $118 = $117 >>> 1;\n     $119 = $118 & 1;\n     $120 = $116 | $119;\n     $121 = $117 >>> $119;\n     $122 = (($120) + ($121))|0;\n     $123 = (1504 + ($122<<2)|0);\n     $124 = HEAP32[$123>>2]|0;\n     $125 = ((($124)) + 4|0);\n     $126 = HEAP32[$125>>2]|0;\n     $127 = $126 & -8;\n     $128 = (($127) - ($6))|0;\n     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;\n     while(1) {\n      $129 = ((($$0169$i)) + 16|0);\n      $130 = HEAP32[$129>>2]|0;\n      $131 = ($130|0)==(0|0);\n      if ($131) {\n       $132 = ((($$0169$i)) + 20|0);\n       $133 = HEAP32[$132>>2]|0;\n       $134 = ($133|0)==(0|0);\n       if ($134) {\n        break;\n       } else {\n        $136 = $133;\n       }\n      } else {\n       $136 = $130;\n      }\n      $135 = ((($136)) + 4|0);\n      $137 = HEAP32[$135>>2]|0;\n      $138 = $137 & -8;\n      $139 = (($138) - ($6))|0;\n      $140 = ($139>>>0)<($$0171$i>>>0);\n      $spec$select$i = $140 ? $139 : $$0171$i;\n      $spec$select1$i = $140 ? $136 : $$0170$i;\n      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;\n     }\n     $141 = (($$0170$i) + ($6)|0);\n     $142 = ($141>>>0)>($$0170$i>>>0);\n     if ($142) {\n      $143 = ((($$0170$i)) + 24|0);\n      $144 = HEAP32[$143>>2]|0;\n      $145 = ((($$0170$i)) + 12|0);\n      $146 = HEAP32[$145>>2]|0;\n      $147 = ($146|0)==($$0170$i|0);\n      do {\n       if ($147) {\n        $152 = ((($$0170$i)) + 20|0);\n        $153 = HEAP32[$152>>2]|0;\n        $154 = ($153|0)==(0|0);\n        if ($154) {\n         $155 = ((($$0170$i)) + 16|0);\n         $156 = HEAP32[$155>>2]|0;\n         $157 = ($156|0)==(0|0);\n         if ($157) {\n          $$3$i = 0;\n          break;\n         } else {\n          $$1174$i$ph = $156;$$1176$i$ph = $155;\n         }\n        } else {\n         $$1174$i$ph = $153;$$1176$i$ph = $152;\n        }\n        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;\n        while(1) {\n         $158 = ((($$1174$i)) + 20|0);\n         $159 = HEAP32[$158>>2]|0;\n         $160 = ($159|0)==(0|0);\n         if ($160) {\n          $161 = ((($$1174$i)) + 16|0);\n          $162 = HEAP32[$161>>2]|0;\n          $163 = ($162|0)==(0|0);\n          if ($163) {\n           break;\n          } else {\n           $$1174$i$be = $162;$$1176$i$be = $161;\n          }\n         } else {\n          $$1174$i$be = $159;$$1176$i$be = $158;\n         }\n         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;\n        }\n        HEAP32[$$1176$i>>2] = 0;\n        $$3$i = $$1174$i;\n       } else {\n        $148 = ((($$0170$i)) + 8|0);\n        $149 = HEAP32[$148>>2]|0;\n        $150 = ((($149)) + 12|0);\n        HEAP32[$150>>2] = $146;\n        $151 = ((($146)) + 8|0);\n        HEAP32[$151>>2] = $149;\n        $$3$i = $146;\n       }\n      } while(0);\n      $164 = ($144|0)==(0|0);\n      do {\n       if (!($164)) {\n        $165 = ((($$0170$i)) + 28|0);\n        $166 = HEAP32[$165>>2]|0;\n        $167 = (1504 + ($166<<2)|0);\n        $168 = HEAP32[$167>>2]|0;\n        $169 = ($$0170$i|0)==($168|0);\n        if ($169) {\n         HEAP32[$167>>2] = $$3$i;\n         $cond$i = ($$3$i|0)==(0|0);\n         if ($cond$i) {\n          $170 = 1 << $166;\n          $171 = $170 ^ -1;\n          $172 = $98 & $171;\n          HEAP32[(1204)>>2] = $172;\n          break;\n         }\n        } else {\n         $173 = ((($144)) + 16|0);\n         $174 = HEAP32[$173>>2]|0;\n         $175 = ($174|0)==($$0170$i|0);\n         $176 = ((($144)) + 20|0);\n         $$sink = $175 ? $173 : $176;\n         HEAP32[$$sink>>2] = $$3$i;\n         $177 = ($$3$i|0)==(0|0);\n         if ($177) {\n          break;\n         }\n        }\n        $178 = ((($$3$i)) + 24|0);\n        HEAP32[$178>>2] = $144;\n        $179 = ((($$0170$i)) + 16|0);\n        $180 = HEAP32[$179>>2]|0;\n        $181 = ($180|0)==(0|0);\n        if (!($181)) {\n         $182 = ((($$3$i)) + 16|0);\n         HEAP32[$182>>2] = $180;\n         $183 = ((($180)) + 24|0);\n         HEAP32[$183>>2] = $$3$i;\n        }\n        $184 = ((($$0170$i)) + 20|0);\n        $185 = HEAP32[$184>>2]|0;\n        $186 = ($185|0)==(0|0);\n        if (!($186)) {\n         $187 = ((($$3$i)) + 20|0);\n         HEAP32[$187>>2] = $185;\n         $188 = ((($185)) + 24|0);\n         HEAP32[$188>>2] = $$3$i;\n        }\n       }\n      } while(0);\n      $189 = ($$0171$i>>>0)<(16);\n      if ($189) {\n       $190 = (($$0171$i) + ($6))|0;\n       $191 = $190 | 3;\n       $192 = ((($$0170$i)) + 4|0);\n       HEAP32[$192>>2] = $191;\n       $193 = (($$0170$i) + ($190)|0);\n       $194 = ((($193)) + 4|0);\n       $195 = HEAP32[$194>>2]|0;\n       $196 = $195 | 1;\n       HEAP32[$194>>2] = $196;\n      } else {\n       $197 = $6 | 3;\n       $198 = ((($$0170$i)) + 4|0);\n       HEAP32[$198>>2] = $197;\n       $199 = $$0171$i | 1;\n       $200 = ((($141)) + 4|0);\n       HEAP32[$200>>2] = $199;\n       $201 = (($141) + ($$0171$i)|0);\n       HEAP32[$201>>2] = $$0171$i;\n       $202 = ($33|0)==(0);\n       if (!($202)) {\n        $203 = HEAP32[(1220)>>2]|0;\n        $204 = $33 >>> 3;\n        $205 = $204 << 1;\n        $206 = (1240 + ($205<<2)|0);\n        $207 = 1 << $204;\n        $208 = $207 & $8;\n        $209 = ($208|0)==(0);\n        if ($209) {\n         $210 = $207 | $8;\n         HEAP32[300] = $210;\n         $$pre$i = ((($206)) + 8|0);\n         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;\n        } else {\n         $211 = ((($206)) + 8|0);\n         $212 = HEAP32[$211>>2]|0;\n         $$0$i = $212;$$pre$phi$iZ2D = $211;\n        }\n        HEAP32[$$pre$phi$iZ2D>>2] = $203;\n        $213 = ((($$0$i)) + 12|0);\n        HEAP32[$213>>2] = $203;\n        $214 = ((($203)) + 8|0);\n        HEAP32[$214>>2] = $$0$i;\n        $215 = ((($203)) + 12|0);\n        HEAP32[$215>>2] = $206;\n       }\n       HEAP32[(1208)>>2] = $$0171$i;\n       HEAP32[(1220)>>2] = $141;\n      }\n      $216 = ((($$0170$i)) + 8|0);\n      $$0 = $216;\n      STACKTOP = sp;return ($$0|0);\n     } else {\n      $$0192 = $6;\n     }\n    }\n   } else {\n    $$0192 = $6;\n   }\n  } else {\n   $217 = ($0>>>0)>(4294967231);\n   if ($217) {\n    $$0192 = -1;\n   } else {\n    $218 = (($0) + 11)|0;\n    $219 = $218 & -8;\n    $220 = HEAP32[(1204)>>2]|0;\n    $221 = ($220|0)==(0);\n    if ($221) {\n     $$0192 = $219;\n    } else {\n     $222 = (0 - ($219))|0;\n     $223 = $218 >>> 8;\n     $224 = ($223|0)==(0);\n     if ($224) {\n      $$0335$i = 0;\n     } else {\n      $225 = ($219>>>0)>(16777215);\n      if ($225) {\n       $$0335$i = 31;\n      } else {\n       $226 = (($223) + 1048320)|0;\n       $227 = $226 >>> 16;\n       $228 = $227 & 8;\n       $229 = $223 << $228;\n       $230 = (($229) + 520192)|0;\n       $231 = $230 >>> 16;\n       $232 = $231 & 4;\n       $233 = $232 | $228;\n       $234 = $229 << $232;\n       $235 = (($234) + 245760)|0;\n       $236 = $235 >>> 16;\n       $237 = $236 & 2;\n       $238 = $233 | $237;\n       $239 = (14 - ($238))|0;\n       $240 = $234 << $237;\n       $241 = $240 >>> 15;\n       $242 = (($239) + ($241))|0;\n       $243 = $242 << 1;\n       $244 = (($242) + 7)|0;\n       $245 = $219 >>> $244;\n       $246 = $245 & 1;\n       $247 = $246 | $243;\n       $$0335$i = $247;\n      }\n     }\n     $248 = (1504 + ($$0335$i<<2)|0);\n     $249 = HEAP32[$248>>2]|0;\n     $250 = ($249|0)==(0|0);\n     L79: do {\n      if ($250) {\n       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;\n       label = 61;\n      } else {\n       $251 = ($$0335$i|0)==(31);\n       $252 = $$0335$i >>> 1;\n       $253 = (25 - ($252))|0;\n       $254 = $251 ? 0 : $253;\n       $255 = $219 << $254;\n       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;\n       while(1) {\n        $256 = ((($$0329$i)) + 4|0);\n        $257 = HEAP32[$256>>2]|0;\n        $258 = $257 & -8;\n        $259 = (($258) - ($219))|0;\n        $260 = ($259>>>0)<($$0323$i>>>0);\n        if ($260) {\n         $261 = ($259|0)==(0);\n         if ($261) {\n          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;\n          label = 65;\n          break L79;\n         } else {\n          $$1319$i = $$0329$i;$$1324$i = $259;\n         }\n        } else {\n         $$1319$i = $$0318$i;$$1324$i = $$0323$i;\n        }\n        $262 = ((($$0329$i)) + 20|0);\n        $263 = HEAP32[$262>>2]|0;\n        $264 = $$0336$i >>> 31;\n        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);\n        $266 = HEAP32[$265>>2]|0;\n        $267 = ($263|0)==(0|0);\n        $268 = ($263|0)==($266|0);\n        $or$cond1$i197 = $267 | $268;\n        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;\n        $269 = ($266|0)==(0|0);\n        $spec$select4$i = $$0336$i << 1;\n        if ($269) {\n         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;\n         label = 61;\n         break;\n        } else {\n         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;\n        }\n       }\n      }\n     } while(0);\n     if ((label|0) == 61) {\n      $270 = ($$2331$i|0)==(0|0);\n      $271 = ($$3$i198|0)==(0|0);\n      $or$cond$i199 = $270 & $271;\n      if ($or$cond$i199) {\n       $272 = 2 << $$0335$i;\n       $273 = (0 - ($272))|0;\n       $274 = $272 | $273;\n       $275 = $274 & $220;\n       $276 = ($275|0)==(0);\n       if ($276) {\n        $$0192 = $219;\n        break;\n       }\n       $277 = (0 - ($275))|0;\n       $278 = $275 & $277;\n       $279 = (($278) + -1)|0;\n       $280 = $279 >>> 12;\n       $281 = $280 & 16;\n       $282 = $279 >>> $281;\n       $283 = $282 >>> 5;\n       $284 = $283 & 8;\n       $285 = $284 | $281;\n       $286 = $282 >>> $284;\n       $287 = $286 >>> 2;\n       $288 = $287 & 4;\n       $289 = $285 | $288;\n       $290 = $286 >>> $288;\n       $291 = $290 >>> 1;\n       $292 = $291 & 2;\n       $293 = $289 | $292;\n       $294 = $290 >>> $292;\n       $295 = $294 >>> 1;\n       $296 = $295 & 1;\n       $297 = $293 | $296;\n       $298 = $294 >>> $296;\n       $299 = (($297) + ($298))|0;\n       $300 = (1504 + ($299<<2)|0);\n       $301 = HEAP32[$300>>2]|0;\n       $$3$i198211 = 0;$$4333$i = $301;\n      } else {\n       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;\n      }\n      $302 = ($$4333$i|0)==(0|0);\n      if ($302) {\n       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;\n      } else {\n       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;\n       label = 65;\n      }\n     }\n     if ((label|0) == 65) {\n      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;\n      while(1) {\n       $303 = ((($$533413$i)) + 4|0);\n       $304 = HEAP32[$303>>2]|0;\n       $305 = $304 & -8;\n       $306 = (($305) - ($219))|0;\n       $307 = ($306>>>0)<($$432714$i>>>0);\n       $spec$select$i201 = $307 ? $306 : $$432714$i;\n       $spec$select2$i = $307 ? $$533413$i : $$415$i;\n       $308 = ((($$533413$i)) + 16|0);\n       $309 = HEAP32[$308>>2]|0;\n       $310 = ($309|0)==(0|0);\n       if ($310) {\n        $311 = ((($$533413$i)) + 20|0);\n        $312 = HEAP32[$311>>2]|0;\n        $314 = $312;\n       } else {\n        $314 = $309;\n       }\n       $313 = ($314|0)==(0|0);\n       if ($313) {\n        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;\n        break;\n       } else {\n        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;\n       }\n      }\n     }\n     $315 = ($$4$lcssa$i|0)==(0|0);\n     if ($315) {\n      $$0192 = $219;\n     } else {\n      $316 = HEAP32[(1208)>>2]|0;\n      $317 = (($316) - ($219))|0;\n      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);\n      if ($318) {\n       $319 = (($$4$lcssa$i) + ($219)|0);\n       $320 = ($319>>>0)>($$4$lcssa$i>>>0);\n       if ($320) {\n        $321 = ((($$4$lcssa$i)) + 24|0);\n        $322 = HEAP32[$321>>2]|0;\n        $323 = ((($$4$lcssa$i)) + 12|0);\n        $324 = HEAP32[$323>>2]|0;\n        $325 = ($324|0)==($$4$lcssa$i|0);\n        do {\n         if ($325) {\n          $330 = ((($$4$lcssa$i)) + 20|0);\n          $331 = HEAP32[$330>>2]|0;\n          $332 = ($331|0)==(0|0);\n          if ($332) {\n           $333 = ((($$4$lcssa$i)) + 16|0);\n           $334 = HEAP32[$333>>2]|0;\n           $335 = ($334|0)==(0|0);\n           if ($335) {\n            $$3348$i = 0;\n            break;\n           } else {\n            $$1346$i$ph = $334;$$1350$i$ph = $333;\n           }\n          } else {\n           $$1346$i$ph = $331;$$1350$i$ph = $330;\n          }\n          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;\n          while(1) {\n           $336 = ((($$1346$i)) + 20|0);\n           $337 = HEAP32[$336>>2]|0;\n           $338 = ($337|0)==(0|0);\n           if ($338) {\n            $339 = ((($$1346$i)) + 16|0);\n            $340 = HEAP32[$339>>2]|0;\n            $341 = ($340|0)==(0|0);\n            if ($341) {\n             break;\n            } else {\n             $$1346$i$be = $340;$$1350$i$be = $339;\n            }\n           } else {\n            $$1346$i$be = $337;$$1350$i$be = $336;\n           }\n           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;\n          }\n          HEAP32[$$1350$i>>2] = 0;\n          $$3348$i = $$1346$i;\n         } else {\n          $326 = ((($$4$lcssa$i)) + 8|0);\n          $327 = HEAP32[$326>>2]|0;\n          $328 = ((($327)) + 12|0);\n          HEAP32[$328>>2] = $324;\n          $329 = ((($324)) + 8|0);\n          HEAP32[$329>>2] = $327;\n          $$3348$i = $324;\n         }\n        } while(0);\n        $342 = ($322|0)==(0|0);\n        do {\n         if ($342) {\n          $425 = $220;\n         } else {\n          $343 = ((($$4$lcssa$i)) + 28|0);\n          $344 = HEAP32[$343>>2]|0;\n          $345 = (1504 + ($344<<2)|0);\n          $346 = HEAP32[$345>>2]|0;\n          $347 = ($$4$lcssa$i|0)==($346|0);\n          if ($347) {\n           HEAP32[$345>>2] = $$3348$i;\n           $cond$i203 = ($$3348$i|0)==(0|0);\n           if ($cond$i203) {\n            $348 = 1 << $344;\n            $349 = $348 ^ -1;\n            $350 = $220 & $349;\n            HEAP32[(1204)>>2] = $350;\n            $425 = $350;\n            break;\n           }\n          } else {\n           $351 = ((($322)) + 16|0);\n           $352 = HEAP32[$351>>2]|0;\n           $353 = ($352|0)==($$4$lcssa$i|0);\n           $354 = ((($322)) + 20|0);\n           $$sink320 = $353 ? $351 : $354;\n           HEAP32[$$sink320>>2] = $$3348$i;\n           $355 = ($$3348$i|0)==(0|0);\n           if ($355) {\n            $425 = $220;\n            break;\n           }\n          }\n          $356 = ((($$3348$i)) + 24|0);\n          HEAP32[$356>>2] = $322;\n          $357 = ((($$4$lcssa$i)) + 16|0);\n          $358 = HEAP32[$357>>2]|0;\n          $359 = ($358|0)==(0|0);\n          if (!($359)) {\n           $360 = ((($$3348$i)) + 16|0);\n           HEAP32[$360>>2] = $358;\n           $361 = ((($358)) + 24|0);\n           HEAP32[$361>>2] = $$3348$i;\n          }\n          $362 = ((($$4$lcssa$i)) + 20|0);\n          $363 = HEAP32[$362>>2]|0;\n          $364 = ($363|0)==(0|0);\n          if ($364) {\n           $425 = $220;\n          } else {\n           $365 = ((($$3348$i)) + 20|0);\n           HEAP32[$365>>2] = $363;\n           $366 = ((($363)) + 24|0);\n           HEAP32[$366>>2] = $$3348$i;\n           $425 = $220;\n          }\n         }\n        } while(0);\n        $367 = ($$4327$lcssa$i>>>0)<(16);\n        L128: do {\n         if ($367) {\n          $368 = (($$4327$lcssa$i) + ($219))|0;\n          $369 = $368 | 3;\n          $370 = ((($$4$lcssa$i)) + 4|0);\n          HEAP32[$370>>2] = $369;\n          $371 = (($$4$lcssa$i) + ($368)|0);\n          $372 = ((($371)) + 4|0);\n          $373 = HEAP32[$372>>2]|0;\n          $374 = $373 | 1;\n          HEAP32[$372>>2] = $374;\n         } else {\n          $375 = $219 | 3;\n          $376 = ((($$4$lcssa$i)) + 4|0);\n          HEAP32[$376>>2] = $375;\n          $377 = $$4327$lcssa$i | 1;\n          $378 = ((($319)) + 4|0);\n          HEAP32[$378>>2] = $377;\n          $379 = (($319) + ($$4327$lcssa$i)|0);\n          HEAP32[$379>>2] = $$4327$lcssa$i;\n          $380 = $$4327$lcssa$i >>> 3;\n          $381 = ($$4327$lcssa$i>>>0)<(256);\n          if ($381) {\n           $382 = $380 << 1;\n           $383 = (1240 + ($382<<2)|0);\n           $384 = HEAP32[300]|0;\n           $385 = 1 << $380;\n           $386 = $384 & $385;\n           $387 = ($386|0)==(0);\n           if ($387) {\n            $388 = $384 | $385;\n            HEAP32[300] = $388;\n            $$pre$i204 = ((($383)) + 8|0);\n            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;\n           } else {\n            $389 = ((($383)) + 8|0);\n            $390 = HEAP32[$389>>2]|0;\n            $$0344$i = $390;$$pre$phi$i205Z2D = $389;\n           }\n           HEAP32[$$pre$phi$i205Z2D>>2] = $319;\n           $391 = ((($$0344$i)) + 12|0);\n           HEAP32[$391>>2] = $319;\n           $392 = ((($319)) + 8|0);\n           HEAP32[$392>>2] = $$0344$i;\n           $393 = ((($319)) + 12|0);\n           HEAP32[$393>>2] = $383;\n           break;\n          }\n          $394 = $$4327$lcssa$i >>> 8;\n          $395 = ($394|0)==(0);\n          if ($395) {\n           $$0338$i = 0;\n          } else {\n           $396 = ($$4327$lcssa$i>>>0)>(16777215);\n           if ($396) {\n            $$0338$i = 31;\n           } else {\n            $397 = (($394) + 1048320)|0;\n            $398 = $397 >>> 16;\n            $399 = $398 & 8;\n            $400 = $394 << $399;\n            $401 = (($400) + 520192)|0;\n            $402 = $401 >>> 16;\n            $403 = $402 & 4;\n            $404 = $403 | $399;\n            $405 = $400 << $403;\n            $406 = (($405) + 245760)|0;\n            $407 = $406 >>> 16;\n            $408 = $407 & 2;\n            $409 = $404 | $408;\n            $410 = (14 - ($409))|0;\n            $411 = $405 << $408;\n            $412 = $411 >>> 15;\n            $413 = (($410) + ($412))|0;\n            $414 = $413 << 1;\n            $415 = (($413) + 7)|0;\n            $416 = $$4327$lcssa$i >>> $415;\n            $417 = $416 & 1;\n            $418 = $417 | $414;\n            $$0338$i = $418;\n           }\n          }\n          $419 = (1504 + ($$0338$i<<2)|0);\n          $420 = ((($319)) + 28|0);\n          HEAP32[$420>>2] = $$0338$i;\n          $421 = ((($319)) + 16|0);\n          $422 = ((($421)) + 4|0);\n          HEAP32[$422>>2] = 0;\n          HEAP32[$421>>2] = 0;\n          $423 = 1 << $$0338$i;\n          $424 = $425 & $423;\n          $426 = ($424|0)==(0);\n          if ($426) {\n           $427 = $425 | $423;\n           HEAP32[(1204)>>2] = $427;\n           HEAP32[$419>>2] = $319;\n           $428 = ((($319)) + 24|0);\n           HEAP32[$428>>2] = $419;\n           $429 = ((($319)) + 12|0);\n           HEAP32[$429>>2] = $319;\n           $430 = ((($319)) + 8|0);\n           HEAP32[$430>>2] = $319;\n           break;\n          }\n          $431 = HEAP32[$419>>2]|0;\n          $432 = ((($431)) + 4|0);\n          $433 = HEAP32[$432>>2]|0;\n          $434 = $433 & -8;\n          $435 = ($434|0)==($$4327$lcssa$i|0);\n          L145: do {\n           if ($435) {\n            $$0321$lcssa$i = $431;\n           } else {\n            $436 = ($$0338$i|0)==(31);\n            $437 = $$0338$i >>> 1;\n            $438 = (25 - ($437))|0;\n            $439 = $436 ? 0 : $438;\n            $440 = $$4327$lcssa$i << $439;\n            $$032012$i = $440;$$032111$i = $431;\n            while(1) {\n             $447 = $$032012$i >>> 31;\n             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);\n             $443 = HEAP32[$448>>2]|0;\n             $449 = ($443|0)==(0|0);\n             if ($449) {\n              break;\n             }\n             $441 = $$032012$i << 1;\n             $442 = ((($443)) + 4|0);\n             $444 = HEAP32[$442>>2]|0;\n             $445 = $444 & -8;\n             $446 = ($445|0)==($$4327$lcssa$i|0);\n             if ($446) {\n              $$0321$lcssa$i = $443;\n              break L145;\n             } else {\n              $$032012$i = $441;$$032111$i = $443;\n             }\n            }\n            HEAP32[$448>>2] = $319;\n            $450 = ((($319)) + 24|0);\n            HEAP32[$450>>2] = $$032111$i;\n            $451 = ((($319)) + 12|0);\n            HEAP32[$451>>2] = $319;\n            $452 = ((($319)) + 8|0);\n            HEAP32[$452>>2] = $319;\n            break L128;\n           }\n          } while(0);\n          $453 = ((($$0321$lcssa$i)) + 8|0);\n          $454 = HEAP32[$453>>2]|0;\n          $455 = ((($454)) + 12|0);\n          HEAP32[$455>>2] = $319;\n          HEAP32[$453>>2] = $319;\n          $456 = ((($319)) + 8|0);\n          HEAP32[$456>>2] = $454;\n          $457 = ((($319)) + 12|0);\n          HEAP32[$457>>2] = $$0321$lcssa$i;\n          $458 = ((($319)) + 24|0);\n          HEAP32[$458>>2] = 0;\n         }\n        } while(0);\n        $459 = ((($$4$lcssa$i)) + 8|0);\n        $$0 = $459;\n        STACKTOP = sp;return ($$0|0);\n       } else {\n        $$0192 = $219;\n       }\n      } else {\n       $$0192 = $219;\n      }\n     }\n    }\n   }\n  }\n } while(0);\n $460 = HEAP32[(1208)>>2]|0;\n $461 = ($460>>>0)<($$0192>>>0);\n if (!($461)) {\n  $462 = (($460) - ($$0192))|0;\n  $463 = HEAP32[(1220)>>2]|0;\n  $464 = ($462>>>0)>(15);\n  if ($464) {\n   $465 = (($463) + ($$0192)|0);\n   HEAP32[(1220)>>2] = $465;\n   HEAP32[(1208)>>2] = $462;\n   $466 = $462 | 1;\n   $467 = ((($465)) + 4|0);\n   HEAP32[$467>>2] = $466;\n   $468 = (($463) + ($460)|0);\n   HEAP32[$468>>2] = $462;\n   $469 = $$0192 | 3;\n   $470 = ((($463)) + 4|0);\n   HEAP32[$470>>2] = $469;\n  } else {\n   HEAP32[(1208)>>2] = 0;\n   HEAP32[(1220)>>2] = 0;\n   $471 = $460 | 3;\n   $472 = ((($463)) + 4|0);\n   HEAP32[$472>>2] = $471;\n   $473 = (($463) + ($460)|0);\n   $474 = ((($473)) + 4|0);\n   $475 = HEAP32[$474>>2]|0;\n   $476 = $475 | 1;\n   HEAP32[$474>>2] = $476;\n  }\n  $477 = ((($463)) + 8|0);\n  $$0 = $477;\n  STACKTOP = sp;return ($$0|0);\n }\n $478 = HEAP32[(1212)>>2]|0;\n $479 = ($478>>>0)>($$0192>>>0);\n if ($479) {\n  $480 = (($478) - ($$0192))|0;\n  HEAP32[(1212)>>2] = $480;\n  $481 = HEAP32[(1224)>>2]|0;\n  $482 = (($481) + ($$0192)|0);\n  HEAP32[(1224)>>2] = $482;\n  $483 = $480 | 1;\n  $484 = ((($482)) + 4|0);\n  HEAP32[$484>>2] = $483;\n  $485 = $$0192 | 3;\n  $486 = ((($481)) + 4|0);\n  HEAP32[$486>>2] = $485;\n  $487 = ((($481)) + 8|0);\n  $$0 = $487;\n  STACKTOP = sp;return ($$0|0);\n }\n $488 = HEAP32[418]|0;\n $489 = ($488|0)==(0);\n if ($489) {\n  HEAP32[(1680)>>2] = 4096;\n  HEAP32[(1676)>>2] = 4096;\n  HEAP32[(1684)>>2] = -1;\n  HEAP32[(1688)>>2] = -1;\n  HEAP32[(1692)>>2] = 0;\n  HEAP32[(1644)>>2] = 0;\n  $490 = $1;\n  $491 = $490 & -16;\n  $492 = $491 ^ 1431655768;\n  HEAP32[418] = $492;\n  $496 = 4096;\n } else {\n  $$pre$i195 = HEAP32[(1680)>>2]|0;\n  $496 = $$pre$i195;\n }\n $493 = (($$0192) + 48)|0;\n $494 = (($$0192) + 47)|0;\n $495 = (($496) + ($494))|0;\n $497 = (0 - ($496))|0;\n $498 = $495 & $497;\n $499 = ($498>>>0)>($$0192>>>0);\n if (!($499)) {\n  $$0 = 0;\n  STACKTOP = sp;return ($$0|0);\n }\n $500 = HEAP32[(1640)>>2]|0;\n $501 = ($500|0)==(0);\n if (!($501)) {\n  $502 = HEAP32[(1632)>>2]|0;\n  $503 = (($502) + ($498))|0;\n  $504 = ($503>>>0)<=($502>>>0);\n  $505 = ($503>>>0)>($500>>>0);\n  $or$cond1$i = $504 | $505;\n  if ($or$cond1$i) {\n   $$0 = 0;\n   STACKTOP = sp;return ($$0|0);\n  }\n }\n $506 = HEAP32[(1644)>>2]|0;\n $507 = $506 & 4;\n $508 = ($507|0)==(0);\n L178: do {\n  if ($508) {\n   $509 = HEAP32[(1224)>>2]|0;\n   $510 = ($509|0)==(0|0);\n   L180: do {\n    if ($510) {\n     label = 128;\n    } else {\n     $$0$i20$i = (1648);\n     while(1) {\n      $511 = HEAP32[$$0$i20$i>>2]|0;\n      $512 = ($511>>>0)>($509>>>0);\n      if (!($512)) {\n       $513 = ((($$0$i20$i)) + 4|0);\n       $514 = HEAP32[$513>>2]|0;\n       $515 = (($511) + ($514)|0);\n       $516 = ($515>>>0)>($509>>>0);\n       if ($516) {\n        break;\n       }\n      }\n      $517 = ((($$0$i20$i)) + 8|0);\n      $518 = HEAP32[$517>>2]|0;\n      $519 = ($518|0)==(0|0);\n      if ($519) {\n       label = 128;\n       break L180;\n      } else {\n       $$0$i20$i = $518;\n      }\n     }\n     $542 = (($495) - ($478))|0;\n     $543 = $542 & $497;\n     $544 = ($543>>>0)<(2147483647);\n     if ($544) {\n      $545 = ((($$0$i20$i)) + 4|0);\n      $546 = (_sbrk(($543|0))|0);\n      $547 = HEAP32[$$0$i20$i>>2]|0;\n      $548 = HEAP32[$545>>2]|0;\n      $549 = (($547) + ($548)|0);\n      $550 = ($546|0)==($549|0);\n      if ($550) {\n       $551 = ($546|0)==((-1)|0);\n       if ($551) {\n        $$2234243136$i = $543;\n       } else {\n        $$723947$i = $543;$$748$i = $546;\n        label = 145;\n        break L178;\n       }\n      } else {\n       $$2247$ph$i = $546;$$2253$ph$i = $543;\n       label = 136;\n      }\n     } else {\n      $$2234243136$i = 0;\n     }\n    }\n   } while(0);\n   do {\n    if ((label|0) == 128) {\n     $520 = (_sbrk(0)|0);\n     $521 = ($520|0)==((-1)|0);\n     if ($521) {\n      $$2234243136$i = 0;\n     } else {\n      $522 = $520;\n      $523 = HEAP32[(1676)>>2]|0;\n      $524 = (($523) + -1)|0;\n      $525 = $524 & $522;\n      $526 = ($525|0)==(0);\n      $527 = (($524) + ($522))|0;\n      $528 = (0 - ($523))|0;\n      $529 = $527 & $528;\n      $530 = (($529) - ($522))|0;\n      $531 = $526 ? 0 : $530;\n      $spec$select49$i = (($531) + ($498))|0;\n      $532 = HEAP32[(1632)>>2]|0;\n      $533 = (($spec$select49$i) + ($532))|0;\n      $534 = ($spec$select49$i>>>0)>($$0192>>>0);\n      $535 = ($spec$select49$i>>>0)<(2147483647);\n      $or$cond$i = $534 & $535;\n      if ($or$cond$i) {\n       $536 = HEAP32[(1640)>>2]|0;\n       $537 = ($536|0)==(0);\n       if (!($537)) {\n        $538 = ($533>>>0)<=($532>>>0);\n        $539 = ($533>>>0)>($536>>>0);\n        $or$cond2$i = $538 | $539;\n        if ($or$cond2$i) {\n         $$2234243136$i = 0;\n         break;\n        }\n       }\n       $540 = (_sbrk(($spec$select49$i|0))|0);\n       $541 = ($540|0)==($520|0);\n       if ($541) {\n        $$723947$i = $spec$select49$i;$$748$i = $520;\n        label = 145;\n        break L178;\n       } else {\n        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;\n        label = 136;\n       }\n      } else {\n       $$2234243136$i = 0;\n      }\n     }\n    }\n   } while(0);\n   do {\n    if ((label|0) == 136) {\n     $552 = (0 - ($$2253$ph$i))|0;\n     $553 = ($$2247$ph$i|0)!=((-1)|0);\n     $554 = ($$2253$ph$i>>>0)<(2147483647);\n     $or$cond7$i = $554 & $553;\n     $555 = ($493>>>0)>($$2253$ph$i>>>0);\n     $or$cond6$i = $555 & $or$cond7$i;\n     if (!($or$cond6$i)) {\n      $565 = ($$2247$ph$i|0)==((-1)|0);\n      if ($565) {\n       $$2234243136$i = 0;\n       break;\n      } else {\n       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;\n       label = 145;\n       break L178;\n      }\n     }\n     $556 = HEAP32[(1680)>>2]|0;\n     $557 = (($494) - ($$2253$ph$i))|0;\n     $558 = (($557) + ($556))|0;\n     $559 = (0 - ($556))|0;\n     $560 = $558 & $559;\n     $561 = ($560>>>0)<(2147483647);\n     if (!($561)) {\n      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;\n      label = 145;\n      break L178;\n     }\n     $562 = (_sbrk(($560|0))|0);\n     $563 = ($562|0)==((-1)|0);\n     if ($563) {\n      (_sbrk(($552|0))|0);\n      $$2234243136$i = 0;\n      break;\n     } else {\n      $564 = (($560) + ($$2253$ph$i))|0;\n      $$723947$i = $564;$$748$i = $$2247$ph$i;\n      label = 145;\n      break L178;\n     }\n    }\n   } while(0);\n   $566 = HEAP32[(1644)>>2]|0;\n   $567 = $566 | 4;\n   HEAP32[(1644)>>2] = $567;\n   $$4236$i = $$2234243136$i;\n   label = 143;\n  } else {\n   $$4236$i = 0;\n   label = 143;\n  }\n } while(0);\n if ((label|0) == 143) {\n  $568 = ($498>>>0)<(2147483647);\n  if ($568) {\n   $569 = (_sbrk(($498|0))|0);\n   $570 = (_sbrk(0)|0);\n   $571 = ($569|0)!=((-1)|0);\n   $572 = ($570|0)!=((-1)|0);\n   $or$cond5$i = $571 & $572;\n   $573 = ($569>>>0)<($570>>>0);\n   $or$cond8$i = $573 & $or$cond5$i;\n   $574 = $570;\n   $575 = $569;\n   $576 = (($574) - ($575))|0;\n   $577 = (($$0192) + 40)|0;\n   $578 = ($576>>>0)>($577>>>0);\n   $spec$select9$i = $578 ? $576 : $$4236$i;\n   $or$cond8$not$i = $or$cond8$i ^ 1;\n   $579 = ($569|0)==((-1)|0);\n   $not$$i = $578 ^ 1;\n   $580 = $579 | $not$$i;\n   $or$cond50$i = $580 | $or$cond8$not$i;\n   if (!($or$cond50$i)) {\n    $$723947$i = $spec$select9$i;$$748$i = $569;\n    label = 145;\n   }\n  }\n }\n if ((label|0) == 145) {\n  $581 = HEAP32[(1632)>>2]|0;\n  $582 = (($581) + ($$723947$i))|0;\n  HEAP32[(1632)>>2] = $582;\n  $583 = HEAP32[(1636)>>2]|0;\n  $584 = ($582>>>0)>($583>>>0);\n  if ($584) {\n   HEAP32[(1636)>>2] = $582;\n  }\n  $585 = HEAP32[(1224)>>2]|0;\n  $586 = ($585|0)==(0|0);\n  L215: do {\n   if ($586) {\n    $587 = HEAP32[(1216)>>2]|0;\n    $588 = ($587|0)==(0|0);\n    $589 = ($$748$i>>>0)<($587>>>0);\n    $or$cond11$i = $588 | $589;\n    if ($or$cond11$i) {\n     HEAP32[(1216)>>2] = $$748$i;\n    }\n    HEAP32[(1648)>>2] = $$748$i;\n    HEAP32[(1652)>>2] = $$723947$i;\n    HEAP32[(1660)>>2] = 0;\n    $590 = HEAP32[418]|0;\n    HEAP32[(1236)>>2] = $590;\n    HEAP32[(1232)>>2] = -1;\n    HEAP32[(1252)>>2] = (1240);\n    HEAP32[(1248)>>2] = (1240);\n    HEAP32[(1260)>>2] = (1248);\n    HEAP32[(1256)>>2] = (1248);\n    HEAP32[(1268)>>2] = (1256);\n    HEAP32[(1264)>>2] = (1256);\n    HEAP32[(1276)>>2] = (1264);\n    HEAP32[(1272)>>2] = (1264);\n    HEAP32[(1284)>>2] = (1272);\n    HEAP32[(1280)>>2] = (1272);\n    HEAP32[(1292)>>2] = (1280);\n    HEAP32[(1288)>>2] = (1280);\n    HEAP32[(1300)>>2] = (1288);\n    HEAP32[(1296)>>2] = (1288);\n    HEAP32[(1308)>>2] = (1296);\n    HEAP32[(1304)>>2] = (1296);\n    HEAP32[(1316)>>2] = (1304);\n    HEAP32[(1312)>>2] = (1304);\n    HEAP32[(1324)>>2] = (1312);\n    HEAP32[(1320)>>2] = (1312);\n    HEAP32[(1332)>>2] = (1320);\n    HEAP32[(1328)>>2] = (1320);\n    HEAP32[(1340)>>2] = (1328);\n    HEAP32[(1336)>>2] = (1328);\n    HEAP32[(1348)>>2] = (1336);\n    HEAP32[(1344)>>2] = (1336);\n    HEAP32[(1356)>>2] = (1344);\n    HEAP32[(1352)>>2] = (1344);\n    HEAP32[(1364)>>2] = (1352);\n    HEAP32[(1360)>>2] = (1352);\n    HEAP32[(1372)>>2] = (1360);\n    HEAP32[(1368)>>2] = (1360);\n    HEAP32[(1380)>>2] = (1368);\n    HEAP32[(1376)>>2] = (1368);\n    HEAP32[(1388)>>2] = (1376);\n    HEAP32[(1384)>>2] = (1376);\n    HEAP32[(1396)>>2] = (1384);\n    HEAP32[(1392)>>2] = (1384);\n    HEAP32[(1404)>>2] = (1392);\n    HEAP32[(1400)>>2] = (1392);\n    HEAP32[(1412)>>2] = (1400);\n    HEAP32[(1408)>>2] = (1400);\n    HEAP32[(1420)>>2] = (1408);\n    HEAP32[(1416)>>2] = (1408);\n    HEAP32[(1428)>>2] = (1416);\n    HEAP32[(1424)>>2] = (1416);\n    HEAP32[(1436)>>2] = (1424);\n    HEAP32[(1432)>>2] = (1424);\n    HEAP32[(1444)>>2] = (1432);\n    HEAP32[(1440)>>2] = (1432);\n    HEAP32[(1452)>>2] = (1440);\n    HEAP32[(1448)>>2] = (1440);\n    HEAP32[(1460)>>2] = (1448);\n    HEAP32[(1456)>>2] = (1448);\n    HEAP32[(1468)>>2] = (1456);\n    HEAP32[(1464)>>2] = (1456);\n    HEAP32[(1476)>>2] = (1464);\n    HEAP32[(1472)>>2] = (1464);\n    HEAP32[(1484)>>2] = (1472);\n    HEAP32[(1480)>>2] = (1472);\n    HEAP32[(1492)>>2] = (1480);\n    HEAP32[(1488)>>2] = (1480);\n    HEAP32[(1500)>>2] = (1488);\n    HEAP32[(1496)>>2] = (1488);\n    $591 = (($$723947$i) + -40)|0;\n    $592 = ((($$748$i)) + 8|0);\n    $593 = $592;\n    $594 = $593 & 7;\n    $595 = ($594|0)==(0);\n    $596 = (0 - ($593))|0;\n    $597 = $596 & 7;\n    $598 = $595 ? 0 : $597;\n    $599 = (($$748$i) + ($598)|0);\n    $600 = (($591) - ($598))|0;\n    HEAP32[(1224)>>2] = $599;\n    HEAP32[(1212)>>2] = $600;\n    $601 = $600 | 1;\n    $602 = ((($599)) + 4|0);\n    HEAP32[$602>>2] = $601;\n    $603 = (($$748$i) + ($591)|0);\n    $604 = ((($603)) + 4|0);\n    HEAP32[$604>>2] = 40;\n    $605 = HEAP32[(1688)>>2]|0;\n    HEAP32[(1228)>>2] = $605;\n   } else {\n    $$024372$i = (1648);\n    while(1) {\n     $606 = HEAP32[$$024372$i>>2]|0;\n     $607 = ((($$024372$i)) + 4|0);\n     $608 = HEAP32[$607>>2]|0;\n     $609 = (($606) + ($608)|0);\n     $610 = ($$748$i|0)==($609|0);\n     if ($610) {\n      label = 154;\n      break;\n     }\n     $611 = ((($$024372$i)) + 8|0);\n     $612 = HEAP32[$611>>2]|0;\n     $613 = ($612|0)==(0|0);\n     if ($613) {\n      break;\n     } else {\n      $$024372$i = $612;\n     }\n    }\n    if ((label|0) == 154) {\n     $614 = ((($$024372$i)) + 4|0);\n     $615 = ((($$024372$i)) + 12|0);\n     $616 = HEAP32[$615>>2]|0;\n     $617 = $616 & 8;\n     $618 = ($617|0)==(0);\n     if ($618) {\n      $619 = ($606>>>0)<=($585>>>0);\n      $620 = ($$748$i>>>0)>($585>>>0);\n      $or$cond51$i = $620 & $619;\n      if ($or$cond51$i) {\n       $621 = (($608) + ($$723947$i))|0;\n       HEAP32[$614>>2] = $621;\n       $622 = HEAP32[(1212)>>2]|0;\n       $623 = (($622) + ($$723947$i))|0;\n       $624 = ((($585)) + 8|0);\n       $625 = $624;\n       $626 = $625 & 7;\n       $627 = ($626|0)==(0);\n       $628 = (0 - ($625))|0;\n       $629 = $628 & 7;\n       $630 = $627 ? 0 : $629;\n       $631 = (($585) + ($630)|0);\n       $632 = (($623) - ($630))|0;\n       HEAP32[(1224)>>2] = $631;\n       HEAP32[(1212)>>2] = $632;\n       $633 = $632 | 1;\n       $634 = ((($631)) + 4|0);\n       HEAP32[$634>>2] = $633;\n       $635 = (($585) + ($623)|0);\n       $636 = ((($635)) + 4|0);\n       HEAP32[$636>>2] = 40;\n       $637 = HEAP32[(1688)>>2]|0;\n       HEAP32[(1228)>>2] = $637;\n       break;\n      }\n     }\n    }\n    $638 = HEAP32[(1216)>>2]|0;\n    $639 = ($$748$i>>>0)<($638>>>0);\n    if ($639) {\n     HEAP32[(1216)>>2] = $$748$i;\n    }\n    $640 = (($$748$i) + ($$723947$i)|0);\n    $$124471$i = (1648);\n    while(1) {\n     $641 = HEAP32[$$124471$i>>2]|0;\n     $642 = ($641|0)==($640|0);\n     if ($642) {\n      label = 162;\n      break;\n     }\n     $643 = ((($$124471$i)) + 8|0);\n     $644 = HEAP32[$643>>2]|0;\n     $645 = ($644|0)==(0|0);\n     if ($645) {\n      break;\n     } else {\n      $$124471$i = $644;\n     }\n    }\n    if ((label|0) == 162) {\n     $646 = ((($$124471$i)) + 12|0);\n     $647 = HEAP32[$646>>2]|0;\n     $648 = $647 & 8;\n     $649 = ($648|0)==(0);\n     if ($649) {\n      HEAP32[$$124471$i>>2] = $$748$i;\n      $650 = ((($$124471$i)) + 4|0);\n      $651 = HEAP32[$650>>2]|0;\n      $652 = (($651) + ($$723947$i))|0;\n      HEAP32[$650>>2] = $652;\n      $653 = ((($$748$i)) + 8|0);\n      $654 = $653;\n      $655 = $654 & 7;\n      $656 = ($655|0)==(0);\n      $657 = (0 - ($654))|0;\n      $658 = $657 & 7;\n      $659 = $656 ? 0 : $658;\n      $660 = (($$748$i) + ($659)|0);\n      $661 = ((($640)) + 8|0);\n      $662 = $661;\n      $663 = $662 & 7;\n      $664 = ($663|0)==(0);\n      $665 = (0 - ($662))|0;\n      $666 = $665 & 7;\n      $667 = $664 ? 0 : $666;\n      $668 = (($640) + ($667)|0);\n      $669 = $668;\n      $670 = $660;\n      $671 = (($669) - ($670))|0;\n      $672 = (($660) + ($$0192)|0);\n      $673 = (($671) - ($$0192))|0;\n      $674 = $$0192 | 3;\n      $675 = ((($660)) + 4|0);\n      HEAP32[$675>>2] = $674;\n      $676 = ($585|0)==($668|0);\n      L238: do {\n       if ($676) {\n        $677 = HEAP32[(1212)>>2]|0;\n        $678 = (($677) + ($673))|0;\n        HEAP32[(1212)>>2] = $678;\n        HEAP32[(1224)>>2] = $672;\n        $679 = $678 | 1;\n        $680 = ((($672)) + 4|0);\n        HEAP32[$680>>2] = $679;\n       } else {\n        $681 = HEAP32[(1220)>>2]|0;\n        $682 = ($681|0)==($668|0);\n        if ($682) {\n         $683 = HEAP32[(1208)>>2]|0;\n         $684 = (($683) + ($673))|0;\n         HEAP32[(1208)>>2] = $684;\n         HEAP32[(1220)>>2] = $672;\n         $685 = $684 | 1;\n         $686 = ((($672)) + 4|0);\n         HEAP32[$686>>2] = $685;\n         $687 = (($672) + ($684)|0);\n         HEAP32[$687>>2] = $684;\n         break;\n        }\n        $688 = ((($668)) + 4|0);\n        $689 = HEAP32[$688>>2]|0;\n        $690 = $689 & 3;\n        $691 = ($690|0)==(1);\n        if ($691) {\n         $692 = $689 & -8;\n         $693 = $689 >>> 3;\n         $694 = ($689>>>0)<(256);\n         L246: do {\n          if ($694) {\n           $695 = ((($668)) + 8|0);\n           $696 = HEAP32[$695>>2]|0;\n           $697 = ((($668)) + 12|0);\n           $698 = HEAP32[$697>>2]|0;\n           $699 = ($698|0)==($696|0);\n           if ($699) {\n            $700 = 1 << $693;\n            $701 = $700 ^ -1;\n            $702 = HEAP32[300]|0;\n            $703 = $702 & $701;\n            HEAP32[300] = $703;\n            break;\n           } else {\n            $704 = ((($696)) + 12|0);\n            HEAP32[$704>>2] = $698;\n            $705 = ((($698)) + 8|0);\n            HEAP32[$705>>2] = $696;\n            break;\n           }\n          } else {\n           $706 = ((($668)) + 24|0);\n           $707 = HEAP32[$706>>2]|0;\n           $708 = ((($668)) + 12|0);\n           $709 = HEAP32[$708>>2]|0;\n           $710 = ($709|0)==($668|0);\n           do {\n            if ($710) {\n             $715 = ((($668)) + 16|0);\n             $716 = ((($715)) + 4|0);\n             $717 = HEAP32[$716>>2]|0;\n             $718 = ($717|0)==(0|0);\n             if ($718) {\n              $719 = HEAP32[$715>>2]|0;\n              $720 = ($719|0)==(0|0);\n              if ($720) {\n               $$3$i$i = 0;\n               break;\n              } else {\n               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;\n              }\n             } else {\n              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;\n             }\n             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;\n             while(1) {\n              $721 = ((($$1263$i$i)) + 20|0);\n              $722 = HEAP32[$721>>2]|0;\n              $723 = ($722|0)==(0|0);\n              if ($723) {\n               $724 = ((($$1263$i$i)) + 16|0);\n               $725 = HEAP32[$724>>2]|0;\n               $726 = ($725|0)==(0|0);\n               if ($726) {\n                break;\n               } else {\n                $$1263$i$i$be = $725;$$1265$i$i$be = $724;\n               }\n              } else {\n               $$1263$i$i$be = $722;$$1265$i$i$be = $721;\n              }\n              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;\n             }\n             HEAP32[$$1265$i$i>>2] = 0;\n             $$3$i$i = $$1263$i$i;\n            } else {\n             $711 = ((($668)) + 8|0);\n             $712 = HEAP32[$711>>2]|0;\n             $713 = ((($712)) + 12|0);\n             HEAP32[$713>>2] = $709;\n             $714 = ((($709)) + 8|0);\n             HEAP32[$714>>2] = $712;\n             $$3$i$i = $709;\n            }\n           } while(0);\n           $727 = ($707|0)==(0|0);\n           if ($727) {\n            break;\n           }\n           $728 = ((($668)) + 28|0);\n           $729 = HEAP32[$728>>2]|0;\n           $730 = (1504 + ($729<<2)|0);\n           $731 = HEAP32[$730>>2]|0;\n           $732 = ($731|0)==($668|0);\n           do {\n            if ($732) {\n             HEAP32[$730>>2] = $$3$i$i;\n             $cond$i$i = ($$3$i$i|0)==(0|0);\n             if (!($cond$i$i)) {\n              break;\n             }\n             $733 = 1 << $729;\n             $734 = $733 ^ -1;\n             $735 = HEAP32[(1204)>>2]|0;\n             $736 = $735 & $734;\n             HEAP32[(1204)>>2] = $736;\n             break L246;\n            } else {\n             $737 = ((($707)) + 16|0);\n             $738 = HEAP32[$737>>2]|0;\n             $739 = ($738|0)==($668|0);\n             $740 = ((($707)) + 20|0);\n             $$sink321 = $739 ? $737 : $740;\n             HEAP32[$$sink321>>2] = $$3$i$i;\n             $741 = ($$3$i$i|0)==(0|0);\n             if ($741) {\n              break L246;\n             }\n            }\n           } while(0);\n           $742 = ((($$3$i$i)) + 24|0);\n           HEAP32[$742>>2] = $707;\n           $743 = ((($668)) + 16|0);\n           $744 = HEAP32[$743>>2]|0;\n           $745 = ($744|0)==(0|0);\n           if (!($745)) {\n            $746 = ((($$3$i$i)) + 16|0);\n            HEAP32[$746>>2] = $744;\n            $747 = ((($744)) + 24|0);\n            HEAP32[$747>>2] = $$3$i$i;\n           }\n           $748 = ((($743)) + 4|0);\n           $749 = HEAP32[$748>>2]|0;\n           $750 = ($749|0)==(0|0);\n           if ($750) {\n            break;\n           }\n           $751 = ((($$3$i$i)) + 20|0);\n           HEAP32[$751>>2] = $749;\n           $752 = ((($749)) + 24|0);\n           HEAP32[$752>>2] = $$3$i$i;\n          }\n         } while(0);\n         $753 = (($668) + ($692)|0);\n         $754 = (($692) + ($673))|0;\n         $$0$i$i = $753;$$0259$i$i = $754;\n        } else {\n         $$0$i$i = $668;$$0259$i$i = $673;\n        }\n        $755 = ((($$0$i$i)) + 4|0);\n        $756 = HEAP32[$755>>2]|0;\n        $757 = $756 & -2;\n        HEAP32[$755>>2] = $757;\n        $758 = $$0259$i$i | 1;\n        $759 = ((($672)) + 4|0);\n        HEAP32[$759>>2] = $758;\n        $760 = (($672) + ($$0259$i$i)|0);\n        HEAP32[$760>>2] = $$0259$i$i;\n        $761 = $$0259$i$i >>> 3;\n        $762 = ($$0259$i$i>>>0)<(256);\n        if ($762) {\n         $763 = $761 << 1;\n         $764 = (1240 + ($763<<2)|0);\n         $765 = HEAP32[300]|0;\n         $766 = 1 << $761;\n         $767 = $765 & $766;\n         $768 = ($767|0)==(0);\n         if ($768) {\n          $769 = $765 | $766;\n          HEAP32[300] = $769;\n          $$pre$i16$i = ((($764)) + 8|0);\n          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;\n         } else {\n          $770 = ((($764)) + 8|0);\n          $771 = HEAP32[$770>>2]|0;\n          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;\n         }\n         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;\n         $772 = ((($$0267$i$i)) + 12|0);\n         HEAP32[$772>>2] = $672;\n         $773 = ((($672)) + 8|0);\n         HEAP32[$773>>2] = $$0267$i$i;\n         $774 = ((($672)) + 12|0);\n         HEAP32[$774>>2] = $764;\n         break;\n        }\n        $775 = $$0259$i$i >>> 8;\n        $776 = ($775|0)==(0);\n        do {\n         if ($776) {\n          $$0268$i$i = 0;\n         } else {\n          $777 = ($$0259$i$i>>>0)>(16777215);\n          if ($777) {\n           $$0268$i$i = 31;\n           break;\n          }\n          $778 = (($775) + 1048320)|0;\n          $779 = $778 >>> 16;\n          $780 = $779 & 8;\n          $781 = $775 << $780;\n          $782 = (($781) + 520192)|0;\n          $783 = $782 >>> 16;\n          $784 = $783 & 4;\n          $785 = $784 | $780;\n          $786 = $781 << $784;\n          $787 = (($786) + 245760)|0;\n          $788 = $787 >>> 16;\n          $789 = $788 & 2;\n          $790 = $785 | $789;\n          $791 = (14 - ($790))|0;\n          $792 = $786 << $789;\n          $793 = $792 >>> 15;\n          $794 = (($791) + ($793))|0;\n          $795 = $794 << 1;\n          $796 = (($794) + 7)|0;\n          $797 = $$0259$i$i >>> $796;\n          $798 = $797 & 1;\n          $799 = $798 | $795;\n          $$0268$i$i = $799;\n         }\n        } while(0);\n        $800 = (1504 + ($$0268$i$i<<2)|0);\n        $801 = ((($672)) + 28|0);\n        HEAP32[$801>>2] = $$0268$i$i;\n        $802 = ((($672)) + 16|0);\n        $803 = ((($802)) + 4|0);\n        HEAP32[$803>>2] = 0;\n        HEAP32[$802>>2] = 0;\n        $804 = HEAP32[(1204)>>2]|0;\n        $805 = 1 << $$0268$i$i;\n        $806 = $804 & $805;\n        $807 = ($806|0)==(0);\n        if ($807) {\n         $808 = $804 | $805;\n         HEAP32[(1204)>>2] = $808;\n         HEAP32[$800>>2] = $672;\n         $809 = ((($672)) + 24|0);\n         HEAP32[$809>>2] = $800;\n         $810 = ((($672)) + 12|0);\n         HEAP32[$810>>2] = $672;\n         $811 = ((($672)) + 8|0);\n         HEAP32[$811>>2] = $672;\n         break;\n        }\n        $812 = HEAP32[$800>>2]|0;\n        $813 = ((($812)) + 4|0);\n        $814 = HEAP32[$813>>2]|0;\n        $815 = $814 & -8;\n        $816 = ($815|0)==($$0259$i$i|0);\n        L291: do {\n         if ($816) {\n          $$0261$lcssa$i$i = $812;\n         } else {\n          $817 = ($$0268$i$i|0)==(31);\n          $818 = $$0268$i$i >>> 1;\n          $819 = (25 - ($818))|0;\n          $820 = $817 ? 0 : $819;\n          $821 = $$0259$i$i << $820;\n          $$02604$i$i = $821;$$02613$i$i = $812;\n          while(1) {\n           $828 = $$02604$i$i >>> 31;\n           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);\n           $824 = HEAP32[$829>>2]|0;\n           $830 = ($824|0)==(0|0);\n           if ($830) {\n            break;\n           }\n           $822 = $$02604$i$i << 1;\n           $823 = ((($824)) + 4|0);\n           $825 = HEAP32[$823>>2]|0;\n           $826 = $825 & -8;\n           $827 = ($826|0)==($$0259$i$i|0);\n           if ($827) {\n            $$0261$lcssa$i$i = $824;\n            break L291;\n           } else {\n            $$02604$i$i = $822;$$02613$i$i = $824;\n           }\n          }\n          HEAP32[$829>>2] = $672;\n          $831 = ((($672)) + 24|0);\n          HEAP32[$831>>2] = $$02613$i$i;\n          $832 = ((($672)) + 12|0);\n          HEAP32[$832>>2] = $672;\n          $833 = ((($672)) + 8|0);\n          HEAP32[$833>>2] = $672;\n          break L238;\n         }\n        } while(0);\n        $834 = ((($$0261$lcssa$i$i)) + 8|0);\n        $835 = HEAP32[$834>>2]|0;\n        $836 = ((($835)) + 12|0);\n        HEAP32[$836>>2] = $672;\n        HEAP32[$834>>2] = $672;\n        $837 = ((($672)) + 8|0);\n        HEAP32[$837>>2] = $835;\n        $838 = ((($672)) + 12|0);\n        HEAP32[$838>>2] = $$0261$lcssa$i$i;\n        $839 = ((($672)) + 24|0);\n        HEAP32[$839>>2] = 0;\n       }\n      } while(0);\n      $968 = ((($660)) + 8|0);\n      $$0 = $968;\n      STACKTOP = sp;return ($$0|0);\n     }\n    }\n    $$0$i$i$i = (1648);\n    while(1) {\n     $840 = HEAP32[$$0$i$i$i>>2]|0;\n     $841 = ($840>>>0)>($585>>>0);\n     if (!($841)) {\n      $842 = ((($$0$i$i$i)) + 4|0);\n      $843 = HEAP32[$842>>2]|0;\n      $844 = (($840) + ($843)|0);\n      $845 = ($844>>>0)>($585>>>0);\n      if ($845) {\n       break;\n      }\n     }\n     $846 = ((($$0$i$i$i)) + 8|0);\n     $847 = HEAP32[$846>>2]|0;\n     $$0$i$i$i = $847;\n    }\n    $848 = ((($844)) + -47|0);\n    $849 = ((($848)) + 8|0);\n    $850 = $849;\n    $851 = $850 & 7;\n    $852 = ($851|0)==(0);\n    $853 = (0 - ($850))|0;\n    $854 = $853 & 7;\n    $855 = $852 ? 0 : $854;\n    $856 = (($848) + ($855)|0);\n    $857 = ((($585)) + 16|0);\n    $858 = ($856>>>0)<($857>>>0);\n    $859 = $858 ? $585 : $856;\n    $860 = ((($859)) + 8|0);\n    $861 = ((($859)) + 24|0);\n    $862 = (($$723947$i) + -40)|0;\n    $863 = ((($$748$i)) + 8|0);\n    $864 = $863;\n    $865 = $864 & 7;\n    $866 = ($865|0)==(0);\n    $867 = (0 - ($864))|0;\n    $868 = $867 & 7;\n    $869 = $866 ? 0 : $868;\n    $870 = (($$748$i) + ($869)|0);\n    $871 = (($862) - ($869))|0;\n    HEAP32[(1224)>>2] = $870;\n    HEAP32[(1212)>>2] = $871;\n    $872 = $871 | 1;\n    $873 = ((($870)) + 4|0);\n    HEAP32[$873>>2] = $872;\n    $874 = (($$748$i) + ($862)|0);\n    $875 = ((($874)) + 4|0);\n    HEAP32[$875>>2] = 40;\n    $876 = HEAP32[(1688)>>2]|0;\n    HEAP32[(1228)>>2] = $876;\n    $877 = ((($859)) + 4|0);\n    HEAP32[$877>>2] = 27;\n    ;HEAP32[$860>>2]=HEAP32[(1648)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(1648)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(1648)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(1648)+12>>2]|0;\n    HEAP32[(1648)>>2] = $$748$i;\n    HEAP32[(1652)>>2] = $$723947$i;\n    HEAP32[(1660)>>2] = 0;\n    HEAP32[(1656)>>2] = $860;\n    $879 = $861;\n    while(1) {\n     $878 = ((($879)) + 4|0);\n     HEAP32[$878>>2] = 7;\n     $880 = ((($879)) + 8|0);\n     $881 = ($880>>>0)<($844>>>0);\n     if ($881) {\n      $879 = $878;\n     } else {\n      break;\n     }\n    }\n    $882 = ($859|0)==($585|0);\n    if (!($882)) {\n     $883 = $859;\n     $884 = $585;\n     $885 = (($883) - ($884))|0;\n     $886 = HEAP32[$877>>2]|0;\n     $887 = $886 & -2;\n     HEAP32[$877>>2] = $887;\n     $888 = $885 | 1;\n     $889 = ((($585)) + 4|0);\n     HEAP32[$889>>2] = $888;\n     HEAP32[$859>>2] = $885;\n     $890 = $885 >>> 3;\n     $891 = ($885>>>0)<(256);\n     if ($891) {\n      $892 = $890 << 1;\n      $893 = (1240 + ($892<<2)|0);\n      $894 = HEAP32[300]|0;\n      $895 = 1 << $890;\n      $896 = $894 & $895;\n      $897 = ($896|0)==(0);\n      if ($897) {\n       $898 = $894 | $895;\n       HEAP32[300] = $898;\n       $$pre$i$i = ((($893)) + 8|0);\n       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;\n      } else {\n       $899 = ((($893)) + 8|0);\n       $900 = HEAP32[$899>>2]|0;\n       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;\n      }\n      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;\n      $901 = ((($$0206$i$i)) + 12|0);\n      HEAP32[$901>>2] = $585;\n      $902 = ((($585)) + 8|0);\n      HEAP32[$902>>2] = $$0206$i$i;\n      $903 = ((($585)) + 12|0);\n      HEAP32[$903>>2] = $893;\n      break;\n     }\n     $904 = $885 >>> 8;\n     $905 = ($904|0)==(0);\n     if ($905) {\n      $$0207$i$i = 0;\n     } else {\n      $906 = ($885>>>0)>(16777215);\n      if ($906) {\n       $$0207$i$i = 31;\n      } else {\n       $907 = (($904) + 1048320)|0;\n       $908 = $907 >>> 16;\n       $909 = $908 & 8;\n       $910 = $904 << $909;\n       $911 = (($910) + 520192)|0;\n       $912 = $911 >>> 16;\n       $913 = $912 & 4;\n       $914 = $913 | $909;\n       $915 = $910 << $913;\n       $916 = (($915) + 245760)|0;\n       $917 = $916 >>> 16;\n       $918 = $917 & 2;\n       $919 = $914 | $918;\n       $920 = (14 - ($919))|0;\n       $921 = $915 << $918;\n       $922 = $921 >>> 15;\n       $923 = (($920) + ($922))|0;\n       $924 = $923 << 1;\n       $925 = (($923) + 7)|0;\n       $926 = $885 >>> $925;\n       $927 = $926 & 1;\n       $928 = $927 | $924;\n       $$0207$i$i = $928;\n      }\n     }\n     $929 = (1504 + ($$0207$i$i<<2)|0);\n     $930 = ((($585)) + 28|0);\n     HEAP32[$930>>2] = $$0207$i$i;\n     $931 = ((($585)) + 20|0);\n     HEAP32[$931>>2] = 0;\n     HEAP32[$857>>2] = 0;\n     $932 = HEAP32[(1204)>>2]|0;\n     $933 = 1 << $$0207$i$i;\n     $934 = $932 & $933;\n     $935 = ($934|0)==(0);\n     if ($935) {\n      $936 = $932 | $933;\n      HEAP32[(1204)>>2] = $936;\n      HEAP32[$929>>2] = $585;\n      $937 = ((($585)) + 24|0);\n      HEAP32[$937>>2] = $929;\n      $938 = ((($585)) + 12|0);\n      HEAP32[$938>>2] = $585;\n      $939 = ((($585)) + 8|0);\n      HEAP32[$939>>2] = $585;\n      break;\n     }\n     $940 = HEAP32[$929>>2]|0;\n     $941 = ((($940)) + 4|0);\n     $942 = HEAP32[$941>>2]|0;\n     $943 = $942 & -8;\n     $944 = ($943|0)==($885|0);\n     L325: do {\n      if ($944) {\n       $$0202$lcssa$i$i = $940;\n      } else {\n       $945 = ($$0207$i$i|0)==(31);\n       $946 = $$0207$i$i >>> 1;\n       $947 = (25 - ($946))|0;\n       $948 = $945 ? 0 : $947;\n       $949 = $885 << $948;\n       $$02014$i$i = $949;$$02023$i$i = $940;\n       while(1) {\n        $956 = $$02014$i$i >>> 31;\n        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);\n        $952 = HEAP32[$957>>2]|0;\n        $958 = ($952|0)==(0|0);\n        if ($958) {\n         break;\n        }\n        $950 = $$02014$i$i << 1;\n        $951 = ((($952)) + 4|0);\n        $953 = HEAP32[$951>>2]|0;\n        $954 = $953 & -8;\n        $955 = ($954|0)==($885|0);\n        if ($955) {\n         $$0202$lcssa$i$i = $952;\n         break L325;\n        } else {\n         $$02014$i$i = $950;$$02023$i$i = $952;\n        }\n       }\n       HEAP32[$957>>2] = $585;\n       $959 = ((($585)) + 24|0);\n       HEAP32[$959>>2] = $$02023$i$i;\n       $960 = ((($585)) + 12|0);\n       HEAP32[$960>>2] = $585;\n       $961 = ((($585)) + 8|0);\n       HEAP32[$961>>2] = $585;\n       break L215;\n      }\n     } while(0);\n     $962 = ((($$0202$lcssa$i$i)) + 8|0);\n     $963 = HEAP32[$962>>2]|0;\n     $964 = ((($963)) + 12|0);\n     HEAP32[$964>>2] = $585;\n     HEAP32[$962>>2] = $585;\n     $965 = ((($585)) + 8|0);\n     HEAP32[$965>>2] = $963;\n     $966 = ((($585)) + 12|0);\n     HEAP32[$966>>2] = $$0202$lcssa$i$i;\n     $967 = ((($585)) + 24|0);\n     HEAP32[$967>>2] = 0;\n    }\n   }\n  } while(0);\n  $969 = HEAP32[(1212)>>2]|0;\n  $970 = ($969>>>0)>($$0192>>>0);\n  if ($970) {\n   $971 = (($969) - ($$0192))|0;\n   HEAP32[(1212)>>2] = $971;\n   $972 = HEAP32[(1224)>>2]|0;\n   $973 = (($972) + ($$0192)|0);\n   HEAP32[(1224)>>2] = $973;\n   $974 = $971 | 1;\n   $975 = ((($973)) + 4|0);\n   HEAP32[$975>>2] = $974;\n   $976 = $$0192 | 3;\n   $977 = ((($972)) + 4|0);\n   HEAP32[$977>>2] = $976;\n   $978 = ((($972)) + 8|0);\n   $$0 = $978;\n   STACKTOP = sp;return ($$0|0);\n  }\n }\n $979 = (___errno_location()|0);\n HEAP32[$979>>2] = 12;\n $$0 = 0;\n STACKTOP = sp;return ($$0|0);\n}\nfunction _free($0) {\n $0 = $0|0;\n var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;\n var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;\n var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;\n var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;\n var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;\n var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;\n var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;\n var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;\n var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;\n var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;\n var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;\n var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;\n var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;\n var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;\n var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n $1 = ($0|0)==(0|0);\n if ($1) {\n  return;\n }\n $2 = ((($0)) + -8|0);\n $3 = HEAP32[(1216)>>2]|0;\n $4 = ((($0)) + -4|0);\n $5 = HEAP32[$4>>2]|0;\n $6 = $5 & -8;\n $7 = (($2) + ($6)|0);\n $8 = $5 & 1;\n $9 = ($8|0)==(0);\n do {\n  if ($9) {\n   $10 = HEAP32[$2>>2]|0;\n   $11 = $5 & 3;\n   $12 = ($11|0)==(0);\n   if ($12) {\n    return;\n   }\n   $13 = (0 - ($10))|0;\n   $14 = (($2) + ($13)|0);\n   $15 = (($10) + ($6))|0;\n   $16 = ($14>>>0)<($3>>>0);\n   if ($16) {\n    return;\n   }\n   $17 = HEAP32[(1220)>>2]|0;\n   $18 = ($17|0)==($14|0);\n   if ($18) {\n    $79 = ((($7)) + 4|0);\n    $80 = HEAP32[$79>>2]|0;\n    $81 = $80 & 3;\n    $82 = ($81|0)==(3);\n    if (!($82)) {\n     $$1 = $14;$$1345 = $15;$88 = $14;\n     break;\n    }\n    $83 = (($14) + ($15)|0);\n    $84 = ((($14)) + 4|0);\n    $85 = $15 | 1;\n    $86 = $80 & -2;\n    HEAP32[(1208)>>2] = $15;\n    HEAP32[$79>>2] = $86;\n    HEAP32[$84>>2] = $85;\n    HEAP32[$83>>2] = $15;\n    return;\n   }\n   $19 = $10 >>> 3;\n   $20 = ($10>>>0)<(256);\n   if ($20) {\n    $21 = ((($14)) + 8|0);\n    $22 = HEAP32[$21>>2]|0;\n    $23 = ((($14)) + 12|0);\n    $24 = HEAP32[$23>>2]|0;\n    $25 = ($24|0)==($22|0);\n    if ($25) {\n     $26 = 1 << $19;\n     $27 = $26 ^ -1;\n     $28 = HEAP32[300]|0;\n     $29 = $28 & $27;\n     HEAP32[300] = $29;\n     $$1 = $14;$$1345 = $15;$88 = $14;\n     break;\n    } else {\n     $30 = ((($22)) + 12|0);\n     HEAP32[$30>>2] = $24;\n     $31 = ((($24)) + 8|0);\n     HEAP32[$31>>2] = $22;\n     $$1 = $14;$$1345 = $15;$88 = $14;\n     break;\n    }\n   }\n   $32 = ((($14)) + 24|0);\n   $33 = HEAP32[$32>>2]|0;\n   $34 = ((($14)) + 12|0);\n   $35 = HEAP32[$34>>2]|0;\n   $36 = ($35|0)==($14|0);\n   do {\n    if ($36) {\n     $41 = ((($14)) + 16|0);\n     $42 = ((($41)) + 4|0);\n     $43 = HEAP32[$42>>2]|0;\n     $44 = ($43|0)==(0|0);\n     if ($44) {\n      $45 = HEAP32[$41>>2]|0;\n      $46 = ($45|0)==(0|0);\n      if ($46) {\n       $$3 = 0;\n       break;\n      } else {\n       $$1350$ph = $45;$$1353$ph = $41;\n      }\n     } else {\n      $$1350$ph = $43;$$1353$ph = $42;\n     }\n     $$1350 = $$1350$ph;$$1353 = $$1353$ph;\n     while(1) {\n      $47 = ((($$1350)) + 20|0);\n      $48 = HEAP32[$47>>2]|0;\n      $49 = ($48|0)==(0|0);\n      if ($49) {\n       $50 = ((($$1350)) + 16|0);\n       $51 = HEAP32[$50>>2]|0;\n       $52 = ($51|0)==(0|0);\n       if ($52) {\n        break;\n       } else {\n        $$1350$be = $51;$$1353$be = $50;\n       }\n      } else {\n       $$1350$be = $48;$$1353$be = $47;\n      }\n      $$1350 = $$1350$be;$$1353 = $$1353$be;\n     }\n     HEAP32[$$1353>>2] = 0;\n     $$3 = $$1350;\n    } else {\n     $37 = ((($14)) + 8|0);\n     $38 = HEAP32[$37>>2]|0;\n     $39 = ((($38)) + 12|0);\n     HEAP32[$39>>2] = $35;\n     $40 = ((($35)) + 8|0);\n     HEAP32[$40>>2] = $38;\n     $$3 = $35;\n    }\n   } while(0);\n   $53 = ($33|0)==(0|0);\n   if ($53) {\n    $$1 = $14;$$1345 = $15;$88 = $14;\n   } else {\n    $54 = ((($14)) + 28|0);\n    $55 = HEAP32[$54>>2]|0;\n    $56 = (1504 + ($55<<2)|0);\n    $57 = HEAP32[$56>>2]|0;\n    $58 = ($57|0)==($14|0);\n    if ($58) {\n     HEAP32[$56>>2] = $$3;\n     $cond371 = ($$3|0)==(0|0);\n     if ($cond371) {\n      $59 = 1 << $55;\n      $60 = $59 ^ -1;\n      $61 = HEAP32[(1204)>>2]|0;\n      $62 = $61 & $60;\n      HEAP32[(1204)>>2] = $62;\n      $$1 = $14;$$1345 = $15;$88 = $14;\n      break;\n     }\n    } else {\n     $63 = ((($33)) + 16|0);\n     $64 = HEAP32[$63>>2]|0;\n     $65 = ($64|0)==($14|0);\n     $66 = ((($33)) + 20|0);\n     $$sink = $65 ? $63 : $66;\n     HEAP32[$$sink>>2] = $$3;\n     $67 = ($$3|0)==(0|0);\n     if ($67) {\n      $$1 = $14;$$1345 = $15;$88 = $14;\n      break;\n     }\n    }\n    $68 = ((($$3)) + 24|0);\n    HEAP32[$68>>2] = $33;\n    $69 = ((($14)) + 16|0);\n    $70 = HEAP32[$69>>2]|0;\n    $71 = ($70|0)==(0|0);\n    if (!($71)) {\n     $72 = ((($$3)) + 16|0);\n     HEAP32[$72>>2] = $70;\n     $73 = ((($70)) + 24|0);\n     HEAP32[$73>>2] = $$3;\n    }\n    $74 = ((($69)) + 4|0);\n    $75 = HEAP32[$74>>2]|0;\n    $76 = ($75|0)==(0|0);\n    if ($76) {\n     $$1 = $14;$$1345 = $15;$88 = $14;\n    } else {\n     $77 = ((($$3)) + 20|0);\n     HEAP32[$77>>2] = $75;\n     $78 = ((($75)) + 24|0);\n     HEAP32[$78>>2] = $$3;\n     $$1 = $14;$$1345 = $15;$88 = $14;\n    }\n   }\n  } else {\n   $$1 = $2;$$1345 = $6;$88 = $2;\n  }\n } while(0);\n $87 = ($88>>>0)<($7>>>0);\n if (!($87)) {\n  return;\n }\n $89 = ((($7)) + 4|0);\n $90 = HEAP32[$89>>2]|0;\n $91 = $90 & 1;\n $92 = ($91|0)==(0);\n if ($92) {\n  return;\n }\n $93 = $90 & 2;\n $94 = ($93|0)==(0);\n if ($94) {\n  $95 = HEAP32[(1224)>>2]|0;\n  $96 = ($95|0)==($7|0);\n  if ($96) {\n   $97 = HEAP32[(1212)>>2]|0;\n   $98 = (($97) + ($$1345))|0;\n   HEAP32[(1212)>>2] = $98;\n   HEAP32[(1224)>>2] = $$1;\n   $99 = $98 | 1;\n   $100 = ((($$1)) + 4|0);\n   HEAP32[$100>>2] = $99;\n   $101 = HEAP32[(1220)>>2]|0;\n   $102 = ($$1|0)==($101|0);\n   if (!($102)) {\n    return;\n   }\n   HEAP32[(1220)>>2] = 0;\n   HEAP32[(1208)>>2] = 0;\n   return;\n  }\n  $103 = HEAP32[(1220)>>2]|0;\n  $104 = ($103|0)==($7|0);\n  if ($104) {\n   $105 = HEAP32[(1208)>>2]|0;\n   $106 = (($105) + ($$1345))|0;\n   HEAP32[(1208)>>2] = $106;\n   HEAP32[(1220)>>2] = $88;\n   $107 = $106 | 1;\n   $108 = ((($$1)) + 4|0);\n   HEAP32[$108>>2] = $107;\n   $109 = (($88) + ($106)|0);\n   HEAP32[$109>>2] = $106;\n   return;\n  }\n  $110 = $90 & -8;\n  $111 = (($110) + ($$1345))|0;\n  $112 = $90 >>> 3;\n  $113 = ($90>>>0)<(256);\n  do {\n   if ($113) {\n    $114 = ((($7)) + 8|0);\n    $115 = HEAP32[$114>>2]|0;\n    $116 = ((($7)) + 12|0);\n    $117 = HEAP32[$116>>2]|0;\n    $118 = ($117|0)==($115|0);\n    if ($118) {\n     $119 = 1 << $112;\n     $120 = $119 ^ -1;\n     $121 = HEAP32[300]|0;\n     $122 = $121 & $120;\n     HEAP32[300] = $122;\n     break;\n    } else {\n     $123 = ((($115)) + 12|0);\n     HEAP32[$123>>2] = $117;\n     $124 = ((($117)) + 8|0);\n     HEAP32[$124>>2] = $115;\n     break;\n    }\n   } else {\n    $125 = ((($7)) + 24|0);\n    $126 = HEAP32[$125>>2]|0;\n    $127 = ((($7)) + 12|0);\n    $128 = HEAP32[$127>>2]|0;\n    $129 = ($128|0)==($7|0);\n    do {\n     if ($129) {\n      $134 = ((($7)) + 16|0);\n      $135 = ((($134)) + 4|0);\n      $136 = HEAP32[$135>>2]|0;\n      $137 = ($136|0)==(0|0);\n      if ($137) {\n       $138 = HEAP32[$134>>2]|0;\n       $139 = ($138|0)==(0|0);\n       if ($139) {\n        $$3363 = 0;\n        break;\n       } else {\n        $$1361$ph = $138;$$1365$ph = $134;\n       }\n      } else {\n       $$1361$ph = $136;$$1365$ph = $135;\n      }\n      $$1361 = $$1361$ph;$$1365 = $$1365$ph;\n      while(1) {\n       $140 = ((($$1361)) + 20|0);\n       $141 = HEAP32[$140>>2]|0;\n       $142 = ($141|0)==(0|0);\n       if ($142) {\n        $143 = ((($$1361)) + 16|0);\n        $144 = HEAP32[$143>>2]|0;\n        $145 = ($144|0)==(0|0);\n        if ($145) {\n         break;\n        } else {\n         $$1361$be = $144;$$1365$be = $143;\n        }\n       } else {\n        $$1361$be = $141;$$1365$be = $140;\n       }\n       $$1361 = $$1361$be;$$1365 = $$1365$be;\n      }\n      HEAP32[$$1365>>2] = 0;\n      $$3363 = $$1361;\n     } else {\n      $130 = ((($7)) + 8|0);\n      $131 = HEAP32[$130>>2]|0;\n      $132 = ((($131)) + 12|0);\n      HEAP32[$132>>2] = $128;\n      $133 = ((($128)) + 8|0);\n      HEAP32[$133>>2] = $131;\n      $$3363 = $128;\n     }\n    } while(0);\n    $146 = ($126|0)==(0|0);\n    if (!($146)) {\n     $147 = ((($7)) + 28|0);\n     $148 = HEAP32[$147>>2]|0;\n     $149 = (1504 + ($148<<2)|0);\n     $150 = HEAP32[$149>>2]|0;\n     $151 = ($150|0)==($7|0);\n     if ($151) {\n      HEAP32[$149>>2] = $$3363;\n      $cond372 = ($$3363|0)==(0|0);\n      if ($cond372) {\n       $152 = 1 << $148;\n       $153 = $152 ^ -1;\n       $154 = HEAP32[(1204)>>2]|0;\n       $155 = $154 & $153;\n       HEAP32[(1204)>>2] = $155;\n       break;\n      }\n     } else {\n      $156 = ((($126)) + 16|0);\n      $157 = HEAP32[$156>>2]|0;\n      $158 = ($157|0)==($7|0);\n      $159 = ((($126)) + 20|0);\n      $$sink395 = $158 ? $156 : $159;\n      HEAP32[$$sink395>>2] = $$3363;\n      $160 = ($$3363|0)==(0|0);\n      if ($160) {\n       break;\n      }\n     }\n     $161 = ((($$3363)) + 24|0);\n     HEAP32[$161>>2] = $126;\n     $162 = ((($7)) + 16|0);\n     $163 = HEAP32[$162>>2]|0;\n     $164 = ($163|0)==(0|0);\n     if (!($164)) {\n      $165 = ((($$3363)) + 16|0);\n      HEAP32[$165>>2] = $163;\n      $166 = ((($163)) + 24|0);\n      HEAP32[$166>>2] = $$3363;\n     }\n     $167 = ((($162)) + 4|0);\n     $168 = HEAP32[$167>>2]|0;\n     $169 = ($168|0)==(0|0);\n     if (!($169)) {\n      $170 = ((($$3363)) + 20|0);\n      HEAP32[$170>>2] = $168;\n      $171 = ((($168)) + 24|0);\n      HEAP32[$171>>2] = $$3363;\n     }\n    }\n   }\n  } while(0);\n  $172 = $111 | 1;\n  $173 = ((($$1)) + 4|0);\n  HEAP32[$173>>2] = $172;\n  $174 = (($88) + ($111)|0);\n  HEAP32[$174>>2] = $111;\n  $175 = HEAP32[(1220)>>2]|0;\n  $176 = ($$1|0)==($175|0);\n  if ($176) {\n   HEAP32[(1208)>>2] = $111;\n   return;\n  } else {\n   $$2 = $111;\n  }\n } else {\n  $177 = $90 & -2;\n  HEAP32[$89>>2] = $177;\n  $178 = $$1345 | 1;\n  $179 = ((($$1)) + 4|0);\n  HEAP32[$179>>2] = $178;\n  $180 = (($88) + ($$1345)|0);\n  HEAP32[$180>>2] = $$1345;\n  $$2 = $$1345;\n }\n $181 = $$2 >>> 3;\n $182 = ($$2>>>0)<(256);\n if ($182) {\n  $183 = $181 << 1;\n  $184 = (1240 + ($183<<2)|0);\n  $185 = HEAP32[300]|0;\n  $186 = 1 << $181;\n  $187 = $185 & $186;\n  $188 = ($187|0)==(0);\n  if ($188) {\n   $189 = $185 | $186;\n   HEAP32[300] = $189;\n   $$pre = ((($184)) + 8|0);\n   $$0366 = $184;$$pre$phiZ2D = $$pre;\n  } else {\n   $190 = ((($184)) + 8|0);\n   $191 = HEAP32[$190>>2]|0;\n   $$0366 = $191;$$pre$phiZ2D = $190;\n  }\n  HEAP32[$$pre$phiZ2D>>2] = $$1;\n  $192 = ((($$0366)) + 12|0);\n  HEAP32[$192>>2] = $$1;\n  $193 = ((($$1)) + 8|0);\n  HEAP32[$193>>2] = $$0366;\n  $194 = ((($$1)) + 12|0);\n  HEAP32[$194>>2] = $184;\n  return;\n }\n $195 = $$2 >>> 8;\n $196 = ($195|0)==(0);\n if ($196) {\n  $$0359 = 0;\n } else {\n  $197 = ($$2>>>0)>(16777215);\n  if ($197) {\n   $$0359 = 31;\n  } else {\n   $198 = (($195) + 1048320)|0;\n   $199 = $198 >>> 16;\n   $200 = $199 & 8;\n   $201 = $195 << $200;\n   $202 = (($201) + 520192)|0;\n   $203 = $202 >>> 16;\n   $204 = $203 & 4;\n   $205 = $204 | $200;\n   $206 = $201 << $204;\n   $207 = (($206) + 245760)|0;\n   $208 = $207 >>> 16;\n   $209 = $208 & 2;\n   $210 = $205 | $209;\n   $211 = (14 - ($210))|0;\n   $212 = $206 << $209;\n   $213 = $212 >>> 15;\n   $214 = (($211) + ($213))|0;\n   $215 = $214 << 1;\n   $216 = (($214) + 7)|0;\n   $217 = $$2 >>> $216;\n   $218 = $217 & 1;\n   $219 = $218 | $215;\n   $$0359 = $219;\n  }\n }\n $220 = (1504 + ($$0359<<2)|0);\n $221 = ((($$1)) + 28|0);\n HEAP32[$221>>2] = $$0359;\n $222 = ((($$1)) + 16|0);\n $223 = ((($$1)) + 20|0);\n HEAP32[$223>>2] = 0;\n HEAP32[$222>>2] = 0;\n $224 = HEAP32[(1204)>>2]|0;\n $225 = 1 << $$0359;\n $226 = $224 & $225;\n $227 = ($226|0)==(0);\n L112: do {\n  if ($227) {\n   $228 = $224 | $225;\n   HEAP32[(1204)>>2] = $228;\n   HEAP32[$220>>2] = $$1;\n   $229 = ((($$1)) + 24|0);\n   HEAP32[$229>>2] = $220;\n   $230 = ((($$1)) + 12|0);\n   HEAP32[$230>>2] = $$1;\n   $231 = ((($$1)) + 8|0);\n   HEAP32[$231>>2] = $$1;\n  } else {\n   $232 = HEAP32[$220>>2]|0;\n   $233 = ((($232)) + 4|0);\n   $234 = HEAP32[$233>>2]|0;\n   $235 = $234 & -8;\n   $236 = ($235|0)==($$2|0);\n   L115: do {\n    if ($236) {\n     $$0347$lcssa = $232;\n    } else {\n     $237 = ($$0359|0)==(31);\n     $238 = $$0359 >>> 1;\n     $239 = (25 - ($238))|0;\n     $240 = $237 ? 0 : $239;\n     $241 = $$2 << $240;\n     $$0346381 = $241;$$0347380 = $232;\n     while(1) {\n      $248 = $$0346381 >>> 31;\n      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);\n      $244 = HEAP32[$249>>2]|0;\n      $250 = ($244|0)==(0|0);\n      if ($250) {\n       break;\n      }\n      $242 = $$0346381 << 1;\n      $243 = ((($244)) + 4|0);\n      $245 = HEAP32[$243>>2]|0;\n      $246 = $245 & -8;\n      $247 = ($246|0)==($$2|0);\n      if ($247) {\n       $$0347$lcssa = $244;\n       break L115;\n      } else {\n       $$0346381 = $242;$$0347380 = $244;\n      }\n     }\n     HEAP32[$249>>2] = $$1;\n     $251 = ((($$1)) + 24|0);\n     HEAP32[$251>>2] = $$0347380;\n     $252 = ((($$1)) + 12|0);\n     HEAP32[$252>>2] = $$1;\n     $253 = ((($$1)) + 8|0);\n     HEAP32[$253>>2] = $$1;\n     break L112;\n    }\n   } while(0);\n   $254 = ((($$0347$lcssa)) + 8|0);\n   $255 = HEAP32[$254>>2]|0;\n   $256 = ((($255)) + 12|0);\n   HEAP32[$256>>2] = $$1;\n   HEAP32[$254>>2] = $$1;\n   $257 = ((($$1)) + 8|0);\n   HEAP32[$257>>2] = $255;\n   $258 = ((($$1)) + 12|0);\n   HEAP32[$258>>2] = $$0347$lcssa;\n   $259 = ((($$1)) + 24|0);\n   HEAP32[$259>>2] = 0;\n  }\n } while(0);\n $260 = HEAP32[(1232)>>2]|0;\n $261 = (($260) + -1)|0;\n HEAP32[(1232)>>2] = $261;\n $262 = ($261|0)==(0);\n if (!($262)) {\n  return;\n }\n $$0194$in$i = (1656);\n while(1) {\n  $$0194$i = HEAP32[$$0194$in$i>>2]|0;\n  $263 = ($$0194$i|0)==(0|0);\n  $264 = ((($$0194$i)) + 8|0);\n  if ($263) {\n   break;\n  } else {\n   $$0194$in$i = $264;\n  }\n }\n HEAP32[(1232)>>2] = -1;\n return;\n}\nfunction ___stdio_close($0) {\n $0 = $0|0;\n var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);\n $vararg_buffer = sp;\n $1 = ((($0)) + 60|0);\n $2 = HEAP32[$1>>2]|0;\n $3 = (_dummy($2)|0);\n HEAP32[$vararg_buffer>>2] = $3;\n $4 = (___syscall6(6,($vararg_buffer|0))|0);\n $5 = (___syscall_ret($4)|0);\n STACKTOP = sp;return ($5|0);\n}\nfunction ___stdout_write($0,$1,$2) {\n $0 = $0|0;\n $1 = $1|0;\n $2 = $2|0;\n var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);\n $vararg_buffer = sp;\n $3 = sp + 16|0;\n $4 = ((($0)) + 36|0);\n HEAP32[$4>>2] = 4;\n $5 = HEAP32[$0>>2]|0;\n $6 = $5 & 64;\n $7 = ($6|0)==(0);\n if ($7) {\n  $8 = ((($0)) + 60|0);\n  $9 = HEAP32[$8>>2]|0;\n  $10 = $3;\n  HEAP32[$vararg_buffer>>2] = $9;\n  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);\n  HEAP32[$vararg_ptr1>>2] = 21523;\n  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);\n  HEAP32[$vararg_ptr2>>2] = $10;\n  $11 = (___syscall54(54,($vararg_buffer|0))|0);\n  $12 = ($11|0)==(0);\n  if (!($12)) {\n   $13 = ((($0)) + 75|0);\n   HEAP8[$13>>0] = -1;\n  }\n }\n $14 = (___stdio_write($0,$1,$2)|0);\n STACKTOP = sp;return ($14|0);\n}\nfunction ___stdio_seek($0,$1,$2) {\n $0 = $0|0;\n $1 = $1|0;\n $2 = $2|0;\n var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);\n $vararg_buffer = sp;\n $3 = sp + 20|0;\n $4 = ((($0)) + 60|0);\n $5 = HEAP32[$4>>2]|0;\n $6 = $3;\n HEAP32[$vararg_buffer>>2] = $5;\n $vararg_ptr1 = ((($vararg_buffer)) + 4|0);\n HEAP32[$vararg_ptr1>>2] = 0;\n $vararg_ptr2 = ((($vararg_buffer)) + 8|0);\n HEAP32[$vararg_ptr2>>2] = $1;\n $vararg_ptr3 = ((($vararg_buffer)) + 12|0);\n HEAP32[$vararg_ptr3>>2] = $6;\n $vararg_ptr4 = ((($vararg_buffer)) + 16|0);\n HEAP32[$vararg_ptr4>>2] = $2;\n $7 = (___syscall140(140,($vararg_buffer|0))|0);\n $8 = (___syscall_ret($7)|0);\n $9 = ($8|0)<(0);\n if ($9) {\n  HEAP32[$3>>2] = -1;\n  $10 = -1;\n } else {\n  $$pre = HEAP32[$3>>2]|0;\n  $10 = $$pre;\n }\n STACKTOP = sp;return ($10|0);\n}\nfunction ___syscall_ret($0) {\n $0 = $0|0;\n var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n $1 = ($0>>>0)>(4294963200);\n if ($1) {\n  $2 = (0 - ($0))|0;\n  $3 = (___errno_location()|0);\n  HEAP32[$3>>2] = $2;\n  $$0 = -1;\n } else {\n  $$0 = $0;\n }\n return ($$0|0);\n}\nfunction ___errno_location() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n return (1696|0);\n}\nfunction ___stdio_write($0,$1,$2) {\n $0 = $0|0;\n $1 = $1|0;\n $2 = $2|0;\n var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;\n var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;\n var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;\n var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);\n $vararg_buffer3 = sp + 32|0;\n $vararg_buffer = sp + 16|0;\n $3 = sp;\n $4 = ((($0)) + 28|0);\n $5 = HEAP32[$4>>2]|0;\n HEAP32[$3>>2] = $5;\n $6 = ((($3)) + 4|0);\n $7 = ((($0)) + 20|0);\n $8 = HEAP32[$7>>2]|0;\n $9 = (($8) - ($5))|0;\n HEAP32[$6>>2] = $9;\n $10 = ((($3)) + 8|0);\n HEAP32[$10>>2] = $1;\n $11 = ((($3)) + 12|0);\n HEAP32[$11>>2] = $2;\n $12 = (($9) + ($2))|0;\n $13 = ((($0)) + 60|0);\n $14 = HEAP32[$13>>2]|0;\n $15 = $3;\n HEAP32[$vararg_buffer>>2] = $14;\n $vararg_ptr1 = ((($vararg_buffer)) + 4|0);\n HEAP32[$vararg_ptr1>>2] = $15;\n $vararg_ptr2 = ((($vararg_buffer)) + 8|0);\n HEAP32[$vararg_ptr2>>2] = 2;\n $16 = (___syscall146(146,($vararg_buffer|0))|0);\n $17 = (___syscall_ret($16)|0);\n $18 = ($12|0)==($17|0);\n L1: do {\n  if ($18) {\n   label = 3;\n  } else {\n   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;\n   while(1) {\n    $26 = ($27|0)<(0);\n    if ($26) {\n     break;\n    }\n    $35 = (($$04855) - ($27))|0;\n    $36 = ((($$04954)) + 4|0);\n    $37 = HEAP32[$36>>2]|0;\n    $38 = ($27>>>0)>($37>>>0);\n    $39 = ((($$04954)) + 8|0);\n    $$150 = $38 ? $39 : $$04954;\n    $40 = $38 << 31 >> 31;\n    $$1 = (($$04756) + ($40))|0;\n    $41 = $38 ? $37 : 0;\n    $$0 = (($27) - ($41))|0;\n    $42 = HEAP32[$$150>>2]|0;\n    $43 = (($42) + ($$0)|0);\n    HEAP32[$$150>>2] = $43;\n    $44 = ((($$150)) + 4|0);\n    $45 = HEAP32[$44>>2]|0;\n    $46 = (($45) - ($$0))|0;\n    HEAP32[$44>>2] = $46;\n    $47 = HEAP32[$13>>2]|0;\n    $48 = $$150;\n    HEAP32[$vararg_buffer3>>2] = $47;\n    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);\n    HEAP32[$vararg_ptr6>>2] = $48;\n    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);\n    HEAP32[$vararg_ptr7>>2] = $$1;\n    $49 = (___syscall146(146,($vararg_buffer3|0))|0);\n    $50 = (___syscall_ret($49)|0);\n    $51 = ($35|0)==($50|0);\n    if ($51) {\n     label = 3;\n     break L1;\n    } else {\n     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;\n    }\n   }\n   $28 = ((($0)) + 16|0);\n   HEAP32[$28>>2] = 0;\n   HEAP32[$4>>2] = 0;\n   HEAP32[$7>>2] = 0;\n   $29 = HEAP32[$0>>2]|0;\n   $30 = $29 | 32;\n   HEAP32[$0>>2] = $30;\n   $31 = ($$04756|0)==(2);\n   if ($31) {\n    $$051 = 0;\n   } else {\n    $32 = ((($$04954)) + 4|0);\n    $33 = HEAP32[$32>>2]|0;\n    $34 = (($2) - ($33))|0;\n    $$051 = $34;\n   }\n  }\n } while(0);\n if ((label|0) == 3) {\n  $19 = ((($0)) + 44|0);\n  $20 = HEAP32[$19>>2]|0;\n  $21 = ((($0)) + 48|0);\n  $22 = HEAP32[$21>>2]|0;\n  $23 = (($20) + ($22)|0);\n  $24 = ((($0)) + 16|0);\n  HEAP32[$24>>2] = $23;\n  $25 = $20;\n  HEAP32[$4>>2] = $25;\n  HEAP32[$7>>2] = $25;\n  $$051 = $2;\n }\n STACKTOP = sp;return ($$051|0);\n}\nfunction _dummy($0) {\n $0 = $0|0;\n var label = 0, sp = 0;\n sp = STACKTOP;\n return ($0|0);\n}\nfunction ___lockfile($0) {\n $0 = $0|0;\n var label = 0, sp = 0;\n sp = STACKTOP;\n return 1;\n}\nfunction ___unlockfile($0) {\n $0 = $0|0;\n var label = 0, sp = 0;\n sp = STACKTOP;\n return;\n}\nfunction ___ofl_lock() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n ___lock((1700|0));\n return (1708|0);\n}\nfunction ___ofl_unlock() {\n var label = 0, sp = 0;\n sp = STACKTOP;\n ___unlock((1700|0));\n return;\n}\nfunction _fflush($0) {\n $0 = $0|0;\n var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;\n var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;\n sp = STACKTOP;\n $1 = ($0|0)==(0|0);\n do {\n  if ($1) {\n   $8 = HEAP32[35]|0;\n   $9 = ($8|0)==(0|0);\n   if ($9) {\n    $29 = 0;\n   } else {\n    $10 = HEAP32[35]|0;\n    $11 = (_fflush($10)|0);\n    $29 = $11;\n   }\n   $12 = (___ofl_lock()|0);\n   $$02325 = HEAP32[$12>>2]|0;\n   $13 = ($$02325|0)==(0|0);\n   if ($13) {\n    $$024$lcssa = $29;\n   } else {\n    $$02327 = $$02325;$$02426 = $29;\n    while(1) {\n     $14 = ((($$02327)) + 76|0);\n     $15 = HEAP32[$14>>2]|0;\n     $16 = ($15|0)>(-1);\n     if ($16) {\n      $17 = (___lockfile($$02327)|0);\n      $26 = $17;\n     } else {\n      $26 = 0;\n     }\n     $18 = ((($$02327)) + 20|0);\n     $19 = HEAP32[$18>>2]|0;\n     $20 = ((($$02327)) + 28|0);\n     $21 = HEAP32[$20>>2]|0;\n     $22 = ($19>>>0)>($21>>>0);\n     if ($22) {\n      $23 = (___fflush_unlocked($$02327)|0);\n      $24 = $23 | $$02426;\n      $$1 = $24;\n     } else {\n      $$1 = $$02426;\n     }\n     $25 = ($26|0)==(0);\n     if (!($25)) {\n      ___unlockfile($$02327);\n     }\n     $27 = ((($$02327)) + 56|0);\n     $$023 = HEAP32[$27>>2]|0;\n     $28 = ($$023|0)==(0|0);\n     if ($28) {\n      $$024$lcssa = $$1;\n      break;\n     } else {\n      $$02327 = $$023;$$02426 = $$1;\n     }\n    }\n   }\n   ___ofl_unlock();\n   $$0 = $$024$lcssa;\n  } else {\n   $2 = ((($0)) + 76|0);\n   $3 = HEAP32[$2>>2]|0;\n   $4 = ($3|0)>(-1);\n   if (!($4)) {\n    $5 = (___fflush_unlocked($0)|0);\n    $$0 = $5;\n    break;\n   }\n   $6 = (___lockfile($0)|0);\n   $phitmp = ($6|0)==(0);\n   $7 = (___fflush_unlocked($0)|0);\n   if ($phitmp) {\n    $$0 = $7;\n   } else {\n    ___unlockfile($0);\n    $$0 = $7;\n   }\n  }\n } while(0);\n return ($$0|0);\n}\nfunction ___fflush_unlocked($0) {\n $0 = $0|0;\n var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;\n var $9 = 0, label = 0, sp = 0;\n sp = STACKTOP;\n $1 = ((($0)) + 20|0);\n $2 = HEAP32[$1>>2]|0;\n $3 = ((($0)) + 28|0);\n $4 = HEAP32[$3>>2]|0;\n $5 = ($2>>>0)>($4>>>0);\n if ($5) {\n  $6 = ((($0)) + 36|0);\n  $7 = HEAP32[$6>>2]|0;\n  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);\n  $8 = HEAP32[$1>>2]|0;\n  $9 = ($8|0)==(0|0);\n  if ($9) {\n   $$0 = -1;\n  } else {\n   label = 3;\n  }\n } else {\n  label = 3;\n }\n if ((label|0) == 3) {\n  $10 = ((($0)) + 4|0);\n  $11 = HEAP32[$10>>2]|0;\n  $12 = ((($0)) + 8|0);\n  $13 = HEAP32[$12>>2]|0;\n  $14 = ($11>>>0)<($13>>>0);\n  if ($14) {\n   $15 = $11;\n   $16 = $13;\n   $17 = (($15) - ($16))|0;\n   $18 = ((($0)) + 40|0);\n   $19 = HEAP32[$18>>2]|0;\n   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);\n  }\n  $20 = ((($0)) + 16|0);\n  HEAP32[$20>>2] = 0;\n  HEAP32[$3>>2] = 0;\n  HEAP32[$1>>2] = 0;\n  HEAP32[$12>>2] = 0;\n  HEAP32[$10>>2] = 0;\n  $$0 = 0;\n }\n return ($$0|0);\n}\nfunction _i64Add(a, b, c, d) {\n    /*\n      x = a + b*2^32\n      y = c + d*2^32\n      result = l + h*2^32\n    */\n    a = a|0; b = b|0; c = c|0; d = d|0;\n    var l = 0, h = 0;\n    l = (a + c)>>>0;\n    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.\n    return ((setTempRet0((h) | 0),l|0)|0);\n}\nfunction _memcpy(dest, src, num) {\n    dest = dest|0; src = src|0; num = num|0;\n    var ret = 0;\n    var aligned_dest_end = 0;\n    var block_aligned_dest_end = 0;\n    var dest_end = 0;\n    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.\n    if ((num|0) >= 8192) {\n      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;\n      return dest|0;\n    }\n\n    ret = dest|0;\n    dest_end = (dest + num)|0;\n    if ((dest&3) == (src&3)) {\n      // The initial unaligned < 4-byte front.\n      while (dest & 3) {\n        if ((num|0) == 0) return ret|0;\n        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);\n        dest = (dest+1)|0;\n        src = (src+1)|0;\n        num = (num-1)|0;\n      }\n      aligned_dest_end = (dest_end & -4)|0;\n      block_aligned_dest_end = (aligned_dest_end - 64)|0;\n      while ((dest|0) <= (block_aligned_dest_end|0) ) {\n        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);\n        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);\n        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);\n        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);\n        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);\n        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);\n        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);\n        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);\n        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);\n        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);\n        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);\n        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);\n        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);\n        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);\n        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);\n        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);\n        dest = (dest+64)|0;\n        src = (src+64)|0;\n      }\n      while ((dest|0) < (aligned_dest_end|0) ) {\n        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);\n        dest = (dest+4)|0;\n        src = (src+4)|0;\n      }\n    } else {\n      // In the unaligned copy case, unroll a bit as well.\n      aligned_dest_end = (dest_end - 4)|0;\n      while ((dest|0) < (aligned_dest_end|0) ) {\n        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);\n        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);\n        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);\n        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);\n        dest = (dest+4)|0;\n        src = (src+4)|0;\n      }\n    }\n    // The remaining unaligned < 4 byte tail.\n    while ((dest|0) < (dest_end|0)) {\n      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);\n      dest = (dest+1)|0;\n      src = (src+1)|0;\n    }\n    return ret|0;\n}\nfunction _memset(ptr, value, num) {\n    ptr = ptr|0; value = value|0; num = num|0;\n    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;\n    end = (ptr + num)|0;\n\n    value = value & 0xff;\n    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {\n      while ((ptr&3) != 0) {\n        HEAP8[((ptr)>>0)]=value;\n        ptr = (ptr+1)|0;\n      }\n\n      aligned_end = (end & -4)|0;\n      value4 = value | (value << 8) | (value << 16) | (value << 24);\n\n      block_aligned_end = (aligned_end - 64)|0;\n\n      while((ptr|0) <= (block_aligned_end|0)) {\n        HEAP32[((ptr)>>2)]=value4;\n        HEAP32[(((ptr)+(4))>>2)]=value4;\n        HEAP32[(((ptr)+(8))>>2)]=value4;\n        HEAP32[(((ptr)+(12))>>2)]=value4;\n        HEAP32[(((ptr)+(16))>>2)]=value4;\n        HEAP32[(((ptr)+(20))>>2)]=value4;\n        HEAP32[(((ptr)+(24))>>2)]=value4;\n        HEAP32[(((ptr)+(28))>>2)]=value4;\n        HEAP32[(((ptr)+(32))>>2)]=value4;\n        HEAP32[(((ptr)+(36))>>2)]=value4;\n        HEAP32[(((ptr)+(40))>>2)]=value4;\n        HEAP32[(((ptr)+(44))>>2)]=value4;\n        HEAP32[(((ptr)+(48))>>2)]=value4;\n        HEAP32[(((ptr)+(52))>>2)]=value4;\n        HEAP32[(((ptr)+(56))>>2)]=value4;\n        HEAP32[(((ptr)+(60))>>2)]=value4;\n        ptr = (ptr + 64)|0;\n      }\n\n      while ((ptr|0) < (aligned_end|0) ) {\n        HEAP32[((ptr)>>2)]=value4;\n        ptr = (ptr+4)|0;\n      }\n    }\n    // The remaining bytes.\n    while ((ptr|0) < (end|0)) {\n      HEAP8[((ptr)>>0)]=value;\n      ptr = (ptr+1)|0;\n    }\n    return (end-num)|0;\n}\nfunction _sbrk(increment) {\n    increment = increment|0;\n    var oldDynamicTop = 0;\n    var oldDynamicTopOnChange = 0;\n    var newDynamicTop = 0;\n    var totalMemory = 0;\n    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;\n    newDynamicTop = oldDynamicTop + increment | 0;\n\n    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.\n      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.\n      abortOnCannotGrowMemory(newDynamicTop|0)|0;\n      ___setErrNo(12);\n      return -1;\n    }\n\n    totalMemory = _emscripten_get_heap_size()|0;\n    if ((newDynamicTop|0) <= (totalMemory|0)) {\n      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;\n    } else {\n      if ((_emscripten_resize_heap(newDynamicTop|0)|0) == 0) {\n        ___setErrNo(12);\n        return -1;\n      }\n    }\n    return oldDynamicTop|0;\n}\n\n  \nfunction dynCall_ii(index,a1) {\n  index = index|0;\n  a1=a1|0;\n  return FUNCTION_TABLE_ii[index&1](a1|0)|0;\n}\n\n\nfunction dynCall_iiii(index,a1,a2,a3) {\n  index = index|0;\n  a1=a1|0; a2=a2|0; a3=a3|0;\n  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;\n}\n\nfunction b0(p0) {\n p0 = p0|0; nullFunc_ii(0);return 0;\n}\nfunction b1(p0,p1,p2) {\n p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;\n}\n\n// EMSCRIPTEN_END_FUNCS\nvar FUNCTION_TABLE_ii = [b0,___stdio_close];\nvar FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,___stdio_write,b1,b1,b1];\n\n  return { ___errno_location: ___errno_location, _fflush: _fflush, _free: _free, _fun1: _fun1, _fun10: _fun10, _fun11: _fun11, _fun2: _fun2, _fun3: _fun3, _fun4: _fun4, _fun5: _fun5, _fun6: _fun6, _fun7: _fun7, _fun8: _fun8, _fun9: _fun9, _i64Add: _i64Add, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };\n})\n// EMSCRIPTEN_END_ASM\n(asmGlobalArg, asmLibraryArg, buffer);\n\nvar real____errno_location = asm[\"___errno_location\"]; asm[\"___errno_location\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real____errno_location.apply(null, arguments);\n};\n\nvar real__fflush = asm[\"_fflush\"]; asm[\"_fflush\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fflush.apply(null, arguments);\n};\n\nvar real__free = asm[\"_free\"]; asm[\"_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__free.apply(null, arguments);\n};\n\nvar real__fun1 = asm[\"_fun1\"]; asm[\"_fun1\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun1.apply(null, arguments);\n};\n\nvar real__fun10 = asm[\"_fun10\"]; asm[\"_fun10\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun10.apply(null, arguments);\n};\n\nvar real__fun11 = asm[\"_fun11\"]; asm[\"_fun11\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun11.apply(null, arguments);\n};\n\nvar real__fun2 = asm[\"_fun2\"]; asm[\"_fun2\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun2.apply(null, arguments);\n};\n\nvar real__fun3 = asm[\"_fun3\"]; asm[\"_fun3\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun3.apply(null, arguments);\n};\n\nvar real__fun4 = asm[\"_fun4\"]; asm[\"_fun4\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun4.apply(null, arguments);\n};\n\nvar real__fun5 = asm[\"_fun5\"]; asm[\"_fun5\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun5.apply(null, arguments);\n};\n\nvar real__fun6 = asm[\"_fun6\"]; asm[\"_fun6\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun6.apply(null, arguments);\n};\n\nvar real__fun7 = asm[\"_fun7\"]; asm[\"_fun7\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun7.apply(null, arguments);\n};\n\nvar real__fun8 = asm[\"_fun8\"]; asm[\"_fun8\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun8.apply(null, arguments);\n};\n\nvar real__fun9 = asm[\"_fun9\"]; asm[\"_fun9\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fun9.apply(null, arguments);\n};\n\nvar real__i64Add = asm[\"_i64Add\"]; asm[\"_i64Add\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__i64Add.apply(null, arguments);\n};\n\nvar real__malloc = asm[\"_malloc\"]; asm[\"_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__malloc.apply(null, arguments);\n};\n\nvar real__sbrk = asm[\"_sbrk\"]; asm[\"_sbrk\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sbrk.apply(null, arguments);\n};\n\nvar real_establishStackSpace = asm[\"establishStackSpace\"]; asm[\"establishStackSpace\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_establishStackSpace.apply(null, arguments);\n};\n\nvar real_stackAlloc = asm[\"stackAlloc\"]; asm[\"stackAlloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackAlloc.apply(null, arguments);\n};\n\nvar real_stackRestore = asm[\"stackRestore\"]; asm[\"stackRestore\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackRestore.apply(null, arguments);\n};\n\nvar real_stackSave = asm[\"stackSave\"]; asm[\"stackSave\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackSave.apply(null, arguments);\n};\nvar ___errno_location = Module[\"___errno_location\"] = asm[\"___errno_location\"];\nvar _fflush = Module[\"_fflush\"] = asm[\"_fflush\"];\nvar _free = Module[\"_free\"] = asm[\"_free\"];\nvar _fun1 = Module[\"_fun1\"] = asm[\"_fun1\"];\nvar _fun10 = Module[\"_fun10\"] = asm[\"_fun10\"];\nvar _fun11 = Module[\"_fun11\"] = asm[\"_fun11\"];\nvar _fun2 = Module[\"_fun2\"] = asm[\"_fun2\"];\nvar _fun3 = Module[\"_fun3\"] = asm[\"_fun3\"];\nvar _fun4 = Module[\"_fun4\"] = asm[\"_fun4\"];\nvar _fun5 = Module[\"_fun5\"] = asm[\"_fun5\"];\nvar _fun6 = Module[\"_fun6\"] = asm[\"_fun6\"];\nvar _fun7 = Module[\"_fun7\"] = asm[\"_fun7\"];\nvar _fun8 = Module[\"_fun8\"] = asm[\"_fun8\"];\nvar _fun9 = Module[\"_fun9\"] = asm[\"_fun9\"];\nvar _i64Add = Module[\"_i64Add\"] = asm[\"_i64Add\"];\nvar _malloc = Module[\"_malloc\"] = asm[\"_malloc\"];\nvar _memcpy = Module[\"_memcpy\"] = asm[\"_memcpy\"];\nvar _memset = Module[\"_memset\"] = asm[\"_memset\"];\nvar _sbrk = Module[\"_sbrk\"] = asm[\"_sbrk\"];\nvar establishStackSpace = Module[\"establishStackSpace\"] = asm[\"establishStackSpace\"];\nvar stackAlloc = Module[\"stackAlloc\"] = asm[\"stackAlloc\"];\nvar stackRestore = Module[\"stackRestore\"] = asm[\"stackRestore\"];\nvar stackSave = Module[\"stackSave\"] = asm[\"stackSave\"];\nvar dynCall_ii = Module[\"dynCall_ii\"] = asm[\"dynCall_ii\"];\nvar dynCall_iiii = Module[\"dynCall_iiii\"] = asm[\"dynCall_iiii\"];\n;\n\n\n\n// === Auto-generated postamble setup entry stuff ===\n\nModule['asm'] = asm;\n\nif (!Module[\"intArrayFromString\"]) Module[\"intArrayFromString\"] = function() { abort(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"intArrayToString\"]) Module[\"intArrayToString\"] = function() { abort(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"ccall\"]) Module[\"ccall\"] = function() { abort(\"'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"cwrap\"]) Module[\"cwrap\"] = function() { abort(\"'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"setValue\"]) Module[\"setValue\"] = function() { abort(\"'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getValue\"]) Module[\"getValue\"] = function() { abort(\"'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"allocate\"]) Module[\"allocate\"] = function() { abort(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getMemory\"]) Module[\"getMemory\"] = function() { abort(\"'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"AsciiToString\"]) Module[\"AsciiToString\"] = function() { abort(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToAscii\"]) Module[\"stringToAscii\"] = function() { abort(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ArrayToString\"]) Module[\"UTF8ArrayToString\"] = function() { abort(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ToString\"]) Module[\"UTF8ToString\"] = function() { abort(\"'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8Array\"]) Module[\"stringToUTF8Array\"] = function() { abort(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8\"]) Module[\"stringToUTF8\"] = function() { abort(\"'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF8\"]) Module[\"lengthBytesUTF8\"] = function() { abort(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF16ToString\"]) Module[\"UTF16ToString\"] = function() { abort(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF16\"]) Module[\"stringToUTF16\"] = function() { abort(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF16\"]) Module[\"lengthBytesUTF16\"] = function() { abort(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF32ToString\"]) Module[\"UTF32ToString\"] = function() { abort(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF32\"]) Module[\"stringToUTF32\"] = function() { abort(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF32\"]) Module[\"lengthBytesUTF32\"] = function() { abort(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"allocateUTF8\"]) Module[\"allocateUTF8\"] = function() { abort(\"'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackTrace\"]) Module[\"stackTrace\"] = function() { abort(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreRun\"]) Module[\"addOnPreRun\"] = function() { abort(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnInit\"]) Module[\"addOnInit\"] = function() { abort(\"'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreMain\"]) Module[\"addOnPreMain\"] = function() { abort(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnExit\"]) Module[\"addOnExit\"] = function() { abort(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPostRun\"]) Module[\"addOnPostRun\"] = function() { abort(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeStringToMemory\"]) Module[\"writeStringToMemory\"] = function() { abort(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeArrayToMemory\"]) Module[\"writeArrayToMemory\"] = function() { abort(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeAsciiToMemory\"]) Module[\"writeAsciiToMemory\"] = function() { abort(\"'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addRunDependency\"]) Module[\"addRunDependency\"] = function() { abort(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"removeRunDependency\"]) Module[\"removeRunDependency\"] = function() { abort(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"ENV\"]) Module[\"ENV\"] = function() { abort(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS\"]) Module[\"FS\"] = function() { abort(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS_createFolder\"]) Module[\"FS_createFolder\"] = function() { abort(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPath\"]) Module[\"FS_createPath\"] = function() { abort(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDataFile\"]) Module[\"FS_createDataFile\"] = function() { abort(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPreloadedFile\"]) Module[\"FS_createPreloadedFile\"] = function() { abort(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLazyFile\"]) Module[\"FS_createLazyFile\"] = function() { abort(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLink\"]) Module[\"FS_createLink\"] = function() { abort(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDevice\"]) Module[\"FS_createDevice\"] = function() { abort(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_unlink\"]) Module[\"FS_unlink\"] = function() { abort(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"GL\"]) Module[\"GL\"] = function() { abort(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynamicAlloc\"]) Module[\"dynamicAlloc\"] = function() { abort(\"'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"warnOnce\"]) Module[\"warnOnce\"] = function() { abort(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadDynamicLibrary\"]) Module[\"loadDynamicLibrary\"] = function() { abort(\"'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadWebAssemblyModule\"]) Module[\"loadWebAssemblyModule\"] = function() { abort(\"'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getLEB\"]) Module[\"getLEB\"] = function() { abort(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFunctionTables\"]) Module[\"getFunctionTables\"] = function() { abort(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"alignFunctionTables\"]) Module[\"alignFunctionTables\"] = function() { abort(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"registerFunctions\"]) Module[\"registerFunctions\"] = function() { abort(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addFunction\"]) Module[\"addFunction\"] = function() { abort(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"removeFunction\"]) Module[\"removeFunction\"] = function() { abort(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFuncWrapper\"]) Module[\"getFuncWrapper\"] = function() { abort(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"prettyPrint\"]) Module[\"prettyPrint\"] = function() { abort(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"makeBigInt\"]) Module[\"makeBigInt\"] = function() { abort(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynCall\"]) Module[\"dynCall\"] = function() { abort(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getCompilerSetting\"]) Module[\"getCompilerSetting\"] = function() { abort(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackSave\"]) Module[\"stackSave\"] = function() { abort(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackRestore\"]) Module[\"stackRestore\"] = function() { abort(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackAlloc\"]) Module[\"stackAlloc\"] = function() { abort(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"establishStackSpace\"]) Module[\"establishStackSpace\"] = function() { abort(\"'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"print\"]) Module[\"print\"] = function() { abort(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"printErr\"]) Module[\"printErr\"] = function() { abort(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nModule[\"getTempRet0\"] = getTempRet0;\nif (!Module[\"setTempRet0\"]) Module[\"setTempRet0\"] = function() { abort(\"'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"Pointer_stringify\"]) Module[\"Pointer_stringify\"] = function() { abort(\"'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeStackCookie\"]) Module[\"writeStackCookie\"] = function() { abort(\"'writeStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"checkStackCookie\"]) Module[\"checkStackCookie\"] = function() { abort(\"'checkStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"abortStackOverflow\"]) Module[\"abortStackOverflow\"] = function() { abort(\"'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"intArrayFromBase64\"]) Module[\"intArrayFromBase64\"] = function() { abort(\"'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"tryParseAsDataURI\"]) Module[\"tryParseAsDataURI\"] = function() { abort(\"'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };if (!Module[\"ALLOC_NORMAL\"]) Object.defineProperty(Module, \"ALLOC_NORMAL\", { get: function() { abort(\"'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_STACK\"]) Object.defineProperty(Module, \"ALLOC_STACK\", { get: function() { abort(\"'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_DYNAMIC\"]) Object.defineProperty(Module, \"ALLOC_DYNAMIC\", { get: function() { abort(\"'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_NONE\"]) Object.defineProperty(Module, \"ALLOC_NONE\", { get: function() { abort(\"'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\n\nif (memoryInitializer) {\n  if (!isDataURI(memoryInitializer)) {\n    memoryInitializer = locateFile(memoryInitializer);\n  }\n  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {\n    var data = Module['readBinary'](memoryInitializer);\n    HEAPU8.set(data, GLOBAL_BASE);\n  } else {\n    addRunDependency('memory initializer');\n    var applyMemoryInitializer = function(data) {\n      if (data.byteLength) data = new Uint8Array(data);\n      for (var i = 0; i < data.length; i++) {\n        assert(HEAPU8[GLOBAL_BASE + i] === 0, \"area for memory initializer should not have been touched before it's loaded\");\n      }\n      HEAPU8.set(data, GLOBAL_BASE);\n      // Delete the typed array that contains the large blob of the memory initializer request response so that\n      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.\n      // its .status field can still be accessed later.\n      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;\n      removeRunDependency('memory initializer');\n    }\n    var doBrowserLoad = function() {\n      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {\n        throw 'could not load memory initializer ' + memoryInitializer;\n      });\n    }\n    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);\n    if (memoryInitializerBytes) {\n      applyMemoryInitializer(memoryInitializerBytes.buffer);\n    } else\n    if (Module['memoryInitializerRequest']) {\n      // a network request has already been created, just use that\n      var useRequest = function() {\n        var request = Module['memoryInitializerRequest'];\n        var response = request.response;\n        if (request.status !== 200 && request.status !== 0) {\n          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);\n          if (data) {\n            response = data.buffer;\n          } else {\n            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That\n            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.\n            // Look in your browser's devtools network console to see what's going on.\n            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);\n            doBrowserLoad();\n            return;\n          }\n        }\n        applyMemoryInitializer(response);\n      }\n      if (Module['memoryInitializerRequest'].response) {\n        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously\n      } else {\n        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it\n      }\n    } else {\n      // fetch it from the network ourselves\n      doBrowserLoad();\n    }\n  }\n}\n\n\n// Modularize mode returns a function, which can be called to\n// create instances. The instances provide a then() method,\n// must like a Promise, that receives a callback. The callback\n// is called when the module is ready to run, with the module\n// as a parameter. (Like a Promise, it also returns the module\n// so you can use the output of .then(..)).\nModule['then'] = function(func) {\n  // We may already be ready to run code at this time. if\n  // so, just queue a call to the callback.\n  if (Module['calledRun']) {\n    func(Module);\n  } else {\n    // we are not ready to call then() yet. we must call it\n    // at the same time we would call onRuntimeInitialized.\n    var old = Module['onRuntimeInitialized'];\n    Module['onRuntimeInitialized'] = function() {\n      if (old) old();\n      func(Module);\n    };\n  }\n  return Module;\n};\n\n/**\n * @constructor\n * @extends {Error}\n * @this {ExitStatus}\n */\nfunction ExitStatus(status) {\n  this.name = \"ExitStatus\";\n  this.message = \"Program terminated with exit(\" + status + \")\";\n  this.status = status;\n};\nExitStatus.prototype = new Error();\nExitStatus.prototype.constructor = ExitStatus;\n\nvar calledMain = false;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!Module['calledRun']) run();\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n}\n\n\n\n\n\n/** @type {function(Array=)} */\nfunction run(args) {\n  args = args || Module['arguments'];\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  writeStackCookie();\n\n  preRun();\n\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\n\n  function doRun() {\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    ensureInitRuntime();\n\n    preMain();\n\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module[\"onRuntimeInitialized\"]');\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else {\n    doRun();\n  }\n  checkStackCookie();\n}\nModule['run'] = run;\n\nfunction checkUnflushedContent() {\n  // Compiler settings do not allow exiting the runtime, so flushing\n  // the streams is not possible. but in ASSERTIONS mode we check\n  // if there was something to flush, and if so tell the user they\n  // should request that the runtime be exitable.\n  // Normally we would not even include flush() at all, but in ASSERTIONS\n  // builds we do so just for this check, and here we see if there is any\n  // content to flush, that is, we check if there would have been\n  // something a non-ASSERTIONS build would have not seen.\n  // How we flush the streams depends on whether we are in FILESYSTEM=0\n  // mode (which has its own special function for this; otherwise, all\n  // the code is inside libc)\n  var print = out;\n  var printErr = err;\n  var has = false;\n  out = err = function(x) {\n    has = true;\n  }\n  try { // it doesn't matter if it fails\n    var flush = flush_NO_FILESYSTEM;\n    if (flush) flush(0);\n  } catch(e) {}\n  out = print;\n  err = printErr;\n  if (has) {\n    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');\n    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');\n  }\n}\n\nfunction exit(status, implicit) {\n  checkUnflushedContent();\n\n  // if this is just main exit-ing implicitly, and the status is 0, then we\n  // don't need to do anything here and can just leave. if the status is\n  // non-zero, though, then we need to report it.\n  // (we may have warned about this earlier, if a situation justifies doing so)\n  if (implicit && Module['noExitRuntime'] && status === 0) {\n    return;\n  }\n\n  if (Module['noExitRuntime']) {\n    // if exit() was called, we may warn the user if the runtime isn't actually being shut down\n    if (!implicit) {\n      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');\n    }\n  } else {\n\n    ABORT = true;\n    EXITSTATUS = status;\n\n    exitRuntime();\n\n    if (Module['onExit']) Module['onExit'](status);\n  }\n\n  Module['quit'](status, new ExitStatus(status));\n}\n\nvar abortDecorators = [];\n\nfunction abort(what) {\n  if (Module['onAbort']) {\n    Module['onAbort'](what);\n  }\n\n  if (what !== undefined) {\n    out(what);\n    err(what);\n    what = JSON.stringify(what)\n  } else {\n    what = '';\n  }\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  var extra = '';\n  var output = 'abort(' + what + ') at ' + stackTrace() + extra;\n  if (abortDecorators) {\n    abortDecorators.forEach(function(decorator) {\n      output = decorator(output, what);\n    });\n  }\n  throw output;\n}\nModule['abort'] = abort;\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\n\n  Module[\"noExitRuntime\"] = true;\n\nrun();\n\n\n\n\n\n// {{MODULE_ADDITIONS}}\n\n\n\n\n\n  return Module\n}\n);\n})();\nif (true)\n      module.exports = Module;\n    else {}\n    \n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), \"/\", __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./test/js-src/funz.js?");

/***/ }),

/***/ "./test/js-src/index.js":
/*!******************************!*\
  !*** ./test/js-src/index.js ***!
  \******************************/
/*! exports provided: HEAPU8, getTempRet0, _malloc, _free, _fun1, _fun2, _fun3, _fun4, _fun5, _fun6, _fun7, _fun8, _fun9, _fun10, _fun11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HEAPU8\", function() { return HEAPU8; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTempRet0\", function() { return getTempRet0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_malloc\", function() { return _malloc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_free\", function() { return _free; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun1\", function() { return _fun1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun2\", function() { return _fun2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun3\", function() { return _fun3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun4\", function() { return _fun4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun5\", function() { return _fun5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun6\", function() { return _fun6; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun7\", function() { return _fun7; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun8\", function() { return _fun8; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun9\", function() { return _fun9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun10\", function() { return _fun10; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_fun11\", function() { return _fun11; });\nconst mkM = __webpack_require__(/*! ./funz.js */ \"./test/js-src/funz.js\");\nconst m = mkM();\n\nconst { HEAPU8, getTempRet0, _malloc, _free,\n               _fun1, _fun2, _fun3, _fun4, _fun5, _fun6,\n               _fun7, _fun8, _fun9, _fun10, _fun11 } = m;\n\n\n//# sourceURL=webpack://h$ffi_emscripten__test_module/./test/js-src/index.js?");

/***/ })

/******/ });